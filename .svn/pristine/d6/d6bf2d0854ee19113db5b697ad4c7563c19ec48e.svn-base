//------------------------------------------------------------------------------
//----- LocationHandler -----------------------------------------------------------
//------------------------------------------------------------------------------

//-------1---------2---------3---------4---------5---------6---------7---------8
//       01234567890123456789012345678901234567890123456789012345678901234567890
//-------+---------+---------+---------+---------+---------+---------+---------+

// copyright:   2012 WiM - USGS

//    authors:  Jeremy K. Newson USGS Wisconsin Internet Mapping
//              
//  
//   purpose:   Handles Location resources through the HTTP uniform interface.
//              Equivalent to the controller in MVC.
//
//discussion:   Handlers are objects which handle all interaction with resources in 
//              this case the resources are POCO classes derived from the EF. 
//              https://github.com/openrasta/openrasta/wiki/Handlers
//
//     
#region Comments
// 04.27.12 - jkn - Created
#endregion                          


using System;
using System.Collections.Generic;
using System.Linq;
using System.Web;

using LaMPServices.Authentication;
using OpenRasta.Web;
using OpenRasta.Security;

namespace LaMPServices.Handlers
{
    public class LocationHandler:HandlerBase
    {

        #region Routed Methods

        #region GetMethods
        [RequiresAuthentication]
        [HttpOperation(HttpMethod.GET)]
        public OperationResult Get()
        {
            List<LOCATION> aLocations;

            //Get basic authentication password
            using (EasySecureString securedPassword = GetSecuredPassword())
            {
                using (LaMPDSEntities aLaMPRDS = GetRDS(securedPassword))
                {

                    aLocations = aLaMPRDS.LOCATIONS.OrderBy(l => l.LOCATION_ID).ToList();

                }//end using
            }//end using

            return new OperationResult.OK { ResponseResource = aLocations };
        }//end httpMethod get

        [RequiresAuthentication]
        [HttpOperation(HttpMethod.GET)]
        public OperationResult Get(Int32 locationId)
        {
            LOCATION aLocation;

            //return BadRequest if ther is no ID
            if (locationId <= 0)
            {
                return new OperationResult.BadRequest();
            }

            //Get basic authentication password
            using (EasySecureString securedPassword = GetSecuredPassword())
            {
                using (LaMPDSEntities aLaMPRDS = GetRDS(securedPassword))
                {

                    aLocation = aLaMPRDS.LOCATIONS.Single(l => l.LOCATION_ID == locationId);


                }//end using
            }//end using

            return new OperationResult.OK { ResponseResource = aLocation };
        }//end httpMethod get

        #endregion

        #region PostMethods
        /// 
        /// Force the user to provide authentication 
        /// 
        [RequiresAuthentication]
        [HttpOperation(HttpMethod.POST, ForUriName = "CreateLocation")]
        public OperationResult Post(LOCATION aLocation)
        {
            //Return BadRequest if missing required fields
            if (string.IsNullOrEmpty(aLocation.NAME) || (!aLocation.LATITUDE.HasValue) || (!aLocation.LONGITUDE.HasValue))
            {
                return new OperationResult.BadRequest();
            }

            //Get basic authentication password
            using (EasySecureString securedPassword = GetSecuredPassword())
            {
                using (LaMPDSEntities aLaMPRDS = GetRDS(securedPassword))
                {
                    //Check for existing location
                    LOCATION existingLocation = aLaMPRDS.LOCATIONS.FirstOrDefault(l =>   l.NAME.ToUpper().Trim() == aLocation.NAME.ToUpper().Trim() &&
                                                                                        l.LATITUDE == aLocation.LATITUDE &&
                                                                                        l.LONGITUDE == aLocation.LONGITUDE &&
                                                                                        (l.PROJECT_NAME.ToUpper().Trim() == aLocation.PROJECT_NAME.ToUpper().Trim()|| string.IsNullOrEmpty(aLocation.PROJECT_NAME)) &&
                                                                                        (l.LAKE_NAME.ToUpper().Trim() == aLocation.LAKE_NAME.ToUpper().Trim() || string.IsNullOrEmpty(aLocation.LAKE_NAME)) &&
                                                                                        (l.STATUS_TYPE_ID== aLocation.STATUS_TYPE_ID || !aLocation.STATUS_TYPE_ID.HasValue) &&
                                                                                        (l.LAKE_TYPE_ID == aLocation.LAKE_TYPE_ID || !aLocation.LAKE_TYPE_ID.HasValue));
                    if (existingLocation == null)
                    {
                        decimal nextKey = 1;
                        if (aLaMPRDS.LOCATIONS.Count() > 0)
                        {
                            nextKey = aLaMPRDS.LOCATIONS.OrderByDescending(l => l.LOCATION_ID).First().LOCATION_ID + 1;
                        }

                        //set ID
                        aLocation.LOCATION_ID = nextKey;

                        aLaMPRDS.LOCATIONS.AddObject(aLocation);

                        aLaMPRDS.SaveChanges(); 
                    }
                    else //return existing
                    {
                        aLocation = existingLocation;
                    }
                }// end using

            }// end using

            //Return object to verify persisitance
            return new OperationResult.OK { ResponseResource = aLocation };
        }

        [RequiresAuthentication]
        [HttpOperation(HttpMethod.POST, ForUriName = "CreateLocationList")]
        public OperationResult Post(List<LOCATION> aLocations)
        {

            //Return BadRequest if missing required fields
            if (aLocations.Count <= 0)
            {
                return new OperationResult.BadRequest();
            }

            //Get basic authentication password
            using (EasySecureString securedPassword = GetSecuredPassword())
            {
                using (LaMPDSEntities aLaMPRDS = GetRDS(securedPassword))
                {
                    decimal nextKey = 1;
                    if (aLaMPRDS.LOCATIONS.Count() > 0)
                    {
                        nextKey = aLaMPRDS.LOCATIONS.OrderByDescending(l => l.LOCATION_ID).First().LOCATION_ID + 1;
                    }

                    foreach (LOCATION item in aLocations)
                    {
                        //update database ID
                        item.LOCATION_ID = nextKey;
                        aLaMPRDS.LOCATIONS.AddObject(item);

                        nextKey += 1;
                    }//next item

                    aLaMPRDS.SaveChanges();
                }// end using

            }// end using

            //Return object to verify persisitance
            return new OperationResult.OK { ResponseResource = aLocations };
        }
        #endregion

        #region PutMethods
        [RequiresAuthentication]
        [HttpOperation(HttpMethod.PUT, ForUriName = "UpdateLocation")]
        public OperationResult Post(Int32 locationId, LOCATION instance)
        {
            //Return BadRequest if missing required fields
            if ((locationId <= 0))
            {
                return new OperationResult.BadRequest();
            }


            //Get basic authentication password
            using (EasySecureString securedPassword = GetSecuredPassword())
            {
                using (LaMPDSEntities aLaMPRDS = GetRDS(securedPassword))
                {
                    //fetch the object to be updated (assuming that it exists)
                    LOCATION ObjectToBeUpdated = aLaMPRDS.LOCATIONS.Single(l => l.LOCATION_ID == locationId);

                    //Project name
                    ObjectToBeUpdated.PROJECT_NAME = (string.IsNullOrEmpty(instance.PROJECT_NAME) ?
                        ObjectToBeUpdated.PROJECT_NAME : instance.PROJECT_NAME);

                    //Name
                    ObjectToBeUpdated.NAME = (string.IsNullOrEmpty(instance.NAME) ?
                        ObjectToBeUpdated.NAME : instance.NAME);

                    //Description
                    ObjectToBeUpdated.DESCRIPTION = (string.IsNullOrEmpty(instance.DESCRIPTION) ?
                        ObjectToBeUpdated.DESCRIPTION : instance.DESCRIPTION);
                
                    //Latitude
                    ObjectToBeUpdated.LATITUDE = (Decimal.Equals(instance.LATITUDE, ObjectToBeUpdated.LATITUDE) ?
                         ObjectToBeUpdated.LATITUDE : instance.LATITUDE);

                    //Longitude
                    ObjectToBeUpdated.LONGITUDE = (Decimal.Equals(instance.LONGITUDE, ObjectToBeUpdated.LONGITUDE) ?
                         ObjectToBeUpdated.LONGITUDE : instance.LONGITUDE);

                    //Lake Name
                    ObjectToBeUpdated.LAKE_NAME = (string.IsNullOrEmpty(instance.LAKE_NAME) ?
                        ObjectToBeUpdated.LAKE_NAME : instance.LAKE_NAME);

                    //Status Type
                    ObjectToBeUpdated.STATUS_TYPE_ID = (Decimal.Equals(instance.STATUS_TYPE_ID, ObjectToBeUpdated.STATUS_TYPE_ID) ?
                         ObjectToBeUpdated.STATUS_TYPE_ID : instance.STATUS_TYPE_ID);

                    //LaMP group
                    ObjectToBeUpdated.LAKE_TYPE_ID = (Decimal.Equals(instance.LAKE_TYPE_ID, ObjectToBeUpdated.LAKE_TYPE_ID) ?
                         ObjectToBeUpdated.LAKE_TYPE_ID : instance.LAKE_TYPE_ID);

                    aLaMPRDS.SaveChanges();
                }// end using

            }// end using

            //Return object to verify persisitance
            return new OperationResult.OK { ResponseResource = instance };
        }

        #endregion

        #region DeleteMethods
        [RequiresAuthentication]
        [HttpOperation(HttpMethod.DELETE, ForUriName = "DeleteLocation")]
        public OperationResult Post(Int32 locationId)
        {
            //Return BadRequest if missing required fields
            if (locationId <= 0)
            {
                return new OperationResult.BadRequest();
            }


            //Get basic authentication password
            using (EasySecureString securedPassword = GetSecuredPassword())
            {
                using (LaMPDSEntities aLaMPRDS = GetRDS(securedPassword))
                {
                    //fetch the object to be updated (assuming that it exists)
                    LOCATION ObjectToBeDeleted = aLaMPRDS.LOCATIONS.Single(l => l.LOCATION_ID == locationId);

                    //delete it
                    aLaMPRDS.LOCATIONS.DeleteObject(ObjectToBeDeleted);
                    aLaMPRDS.SaveChanges();

                }// end using

            }// end using

            //Return object to verify persisitance
            return new OperationResult.OK { };
        }

        #endregion

        #endregion
        #region "Helper Methods"
        private Boolean Exists(System.Data.Objects.IObjectSet<LOCATION> locations, ref LOCATION aLocation)
        {
            LOCATION existingLocation;
            LOCATION thisLocation = aLocation;
            //check if it exists
            try
            {
                existingLocation = locations.FirstOrDefault(l => l.NAME.ToUpper().Trim() == thisLocation.NAME.ToUpper().Trim() &&
                                                                 l.LATITUDE == thisLocation.LATITUDE &&
                                                                 l.LONGITUDE == thisLocation.LONGITUDE &&
                                                                (l.PROJECT_NAME.ToUpper().Trim() == thisLocation.PROJECT_NAME.ToUpper().Trim() || string.IsNullOrEmpty(thisLocation.PROJECT_NAME)) &&
                                                                (l.LAKE_NAME.ToUpper().Trim() == thisLocation.LAKE_NAME.ToUpper().Trim() || string.IsNullOrEmpty(thisLocation.LAKE_NAME)) &&
                                                                (l.STATUS_TYPE_ID == thisLocation.STATUS_TYPE_ID || !thisLocation.STATUS_TYPE_ID.HasValue) &&
                                                                (l.LAKE_TYPE_ID == thisLocation.LAKE_TYPE_ID || !thisLocation.LAKE_TYPE_ID.HasValue));

                if (existingLocation == null)
                    return false;

                //if exists then update ref contact
                aLocation = existingLocation;
                return true;

            }
            catch (Exception)
            {
                return false;
            }
        }

        private decimal GetNextLaKeTypeID(System.Data.Objects.IObjectSet<LOCATION> locations)
        {
            decimal nextKey = 1;
            if (locations.Count() > 0)
            {
                nextKey = locations.OrderByDescending(l => l.LOCATION_ID).First().LOCATION_ID + 1;
            }

            return nextKey;
        }
        #endregion
    }//end LocationHandler
}//end namespace