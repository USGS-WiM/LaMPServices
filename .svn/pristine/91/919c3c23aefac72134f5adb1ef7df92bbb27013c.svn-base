//------------------------------------------------------------------------------
//----- OrganizationHandler -----------------------------------------------------------
//------------------------------------------------------------------------------

//-------1---------2---------3---------4---------5---------6---------7---------8
//       01234567890123456789012345678901234567890123456789012345678901234567890
//-------+---------+---------+---------+---------+---------+---------+---------+

// copyright:   2012 WiM - USGS

//    authors:  Jeremy K. Newson USGS Wisconsin Internet Mapping
//              
//  
//   purpose:   Handles Organizations resources through the HTTP uniform interface.
//              Equivalent to the controller in MVC.
//
//discussion:   Handlers are objects which handle all interaction with resources in 
//              this case the resources are POCO classes derived from the EF. 
//               https://github.com/openrasta/openrasta/wiki/Handlers
//
//     
#region Comments
// 04.26.12 - jkn - Created
#endregion                          


using System;
using System.Collections.Generic;
using System.Linq;
using System.Web;

using LaMPServices.Authentication;
using OpenRasta.Web;
using OpenRasta.Security;

namespace LaMPServices.Handlers
{
    public class OrganizationHandler:HandlerBase
    {

        #region Routed Methods
        #region GetMethods

        [HttpOperation(HttpMethod.GET)]
        public OperationResult Get()
        {
            List<ORGANIZATION> orgs;

            //Get basic authentication password
            using (EasySecureString securedPassword = GetSecuredPassword())
            {
                using (LaMPDSEntities aLaMPRDS = GetRDS(securedPassword))
                {

                    orgs = aLaMPRDS.ORGANIZATIONS.OrderBy(o => o.ORGANIZATION_ID).ToList();

                }//end using
            }//end using

            return new OperationResult.OK { ResponseResource = orgs };
        }//end httpMethod get

        [HttpOperation(HttpMethod.GET)]
        public OperationResult Get(Int32 organizationId)
        {
            ORGANIZATION aOrg;

            //return BadRequest if ther is no ID
            if (organizationId <= 0)
            {
                return new OperationResult.BadRequest();
            }

            //Get basic authentication password
            using (EasySecureString securedPassword = GetSecuredPassword())
            {
                using (LaMPDSEntities aLaMPRDS = GetRDS(securedPassword))
                {

                    aOrg = aLaMPRDS.ORGANIZATIONS.Single(o => o.ORGANIZATION_ID == organizationId);

                }//end using
            }//end using

            return new OperationResult.OK { ResponseResource = aOrg };
        }//end httpMethod get

        #endregion

        #region PostMethods
        /// 
        /// Force the user to provide authentication 
        /// 
        [LaMPRequiresRole(new string[] { AdminRole, ManagerRole })]
        [HttpOperation(HttpMethod.POST)]
        public OperationResult Post(ORGANIZATION organizationId)
        {
            //Return BadRequest if missing required fields
            if (String.IsNullOrEmpty(organizationId.NAME) && String.IsNullOrEmpty(organizationId.SHORTNAME))
            {
                return new OperationResult.BadRequest();
            }

            //Get basic authentication password
            using (EasySecureString securedPassword = GetSecuredPassword())
            {
                using (LaMPDSEntities aLaMPRDS = GetRDS(securedPassword))
                {
                    //check if it exists
                    if (!Exists(aLaMPRDS.ORGANIZATIONS,ref organizationId))
	                {
                        //set ID
                        organizationId.ORGANIZATION_ID = GetNextOrganizationID(aLaMPRDS.ORGANIZATIONS);

                        aLaMPRDS.ORGANIZATIONS.AddObject(organizationId);
                        aLaMPRDS.SaveChanges();
	                }
               
                }// end using

            }// end using

            //Return object to verify persisitance
            return new OperationResult.OK { ResponseResource = organizationId };
        }

        #endregion

        #region PutMethods

        [LaMPRequiresRole(new string[] { AdminRole, ManagerRole })]
        [HttpOperation(HttpMethod.PUT)]
        public OperationResult Put(Int32 organizationId, ORGANIZATION instance)
        {
            //Return BadRequest if missing required fields
            if ((organizationId <= 0))
            {return new OperationResult.BadRequest();}


            //Get basic authentication password
            using (EasySecureString securedPassword = GetSecuredPassword())
            {
                using (LaMPDSEntities aLaMPRDS = GetRDS(securedPassword))
                {
                    //fetch the object to be updated (assuming that it exists)
                    ORGANIZATION ObjectToBeUpdated = aLaMPRDS.ORGANIZATIONS.Single(o => o.ORGANIZATION_ID == organizationId);

                    //Name
                    ObjectToBeUpdated.NAME = (string.IsNullOrEmpty(instance.NAME) ?
                        ObjectToBeUpdated.NAME : instance.NAME);
                
                    //State
                    ObjectToBeUpdated.STATE = (string.IsNullOrEmpty(instance.STATE) ?
                        ObjectToBeUpdated.STATE : instance.STATE);

                    //ShortName
                    ObjectToBeUpdated.SHORTNAME = (string.IsNullOrEmpty(instance.SHORTNAME) ?
                        ObjectToBeUpdated.SHORTNAME : instance.SHORTNAME);

                    //Division
                    ObjectToBeUpdated.DIVISION = (string.IsNullOrEmpty(instance.DIVISION) ?
                        ObjectToBeUpdated.DIVISION : instance.DIVISION);

                    //Section
                    ObjectToBeUpdated.SECTION = (string.IsNullOrEmpty(instance.SECTION) ?
                        ObjectToBeUpdated.SECTION : instance.SECTION);
                
                    aLaMPRDS.SaveChanges();
                }// end using

            }// end using

            //Return object to verify persisitance
            return new OperationResult.OK { ResponseResource = instance };
        }


        #endregion

        #region DeleteMethods

        [RequiresRole(AdminRole)]
        [HttpOperation(HttpMethod.DELETE)]
        public OperationResult Delete(Int32 organizationId)
        {
            //Return BadRequest if missing required fields
            if (organizationId <= 0)
            { return new OperationResult.BadRequest();}


            //Get basic authentication password
            using (EasySecureString securedPassword = GetSecuredPassword())
            {
                using (LaMPDSEntities aLaMPRDS = GetRDS(securedPassword))
                {
                    //fetch the object to be updated (assuming that it exists)
                    ORGANIZATION ObjectToBeDeleted = aLaMPRDS.ORGANIZATIONS.Single(o => o.ORGANIZATION_ID == organizationId);
                    //delete it
                    aLaMPRDS.ORGANIZATIONS.DeleteObject(ObjectToBeDeleted);

                    aLaMPRDS.SaveChanges();

                }// end using
            }// end using

            //Return object to verify persisitance
            return new OperationResult.OK { };
        }

        #endregion

        #endregion
        #region "Helper Methods"
        private Boolean Exists(System.Data.Objects.IObjectSet<ORGANIZATION> organizations, ref ORGANIZATION aOrganization)
        {
            ORGANIZATION existingOrganization;
            ORGANIZATION thisOrganization = aOrganization;
            //check if it exists
            try
            {
                existingOrganization = organizations.FirstOrDefault(o => o.NAME.Trim().ToUpper() == thisOrganization.NAME.Trim().ToUpper() ||
                                                                                            o.SHORTNAME.Trim().ToUpper() == thisOrganization.SHORTNAME.Trim().ToUpper() &&
                                                                                            (o.DIVISION.Trim().ToUpper() == thisOrganization.DIVISION.Trim().ToUpper() || string.IsNullOrEmpty(thisOrganization.DIVISION)));
                    

                if (existingOrganization == null)
                    return false;

                //if exists then update ref contact
                aOrganization = existingOrganization;
                return true;

            }
            catch (Exception)
            {
                return false;
            }
        }

        private decimal GetNextOrganizationID(System.Data.Objects.IObjectSet<ORGANIZATION> organizations)
        {
            decimal nextKey = 1;
            if (organizations.Count() > 0)
            {
                nextKey = organizations.OrderByDescending(o => o.ORGANIZATION_ID).First().ORGANIZATION_ID + 1;
            }

            return nextKey;
        }
        #endregion
    }//end OrganizationHandler
}//end namespace