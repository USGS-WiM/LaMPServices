//------------------------------------------------------------------------------
//----- OrganizationHandler -----------------------------------------------------------
//------------------------------------------------------------------------------

//-------1---------2---------3---------4---------5---------6---------7---------8
//       01234567890123456789012345678901234567890123456789012345678901234567890
//-------+---------+---------+---------+---------+---------+---------+---------+

// copyright:   2012 WiM - USGS

//    authors:  Jeremy K. Newson USGS Wisconsin Internet Mapping
//              
//  
//   purpose:   Handles Organizations resources through the HTTP uniform interface.
//              Equivalent to the controller in MVC.
//
//discussion:   Handlers are objects which handle all interaction with resources in 
//              this case the resources are POCO classes derived from the EF. 
//               https://github.com/openrasta/openrasta/wiki/Handlers
//
//     
#region Comments
// 04.26.12 - jkn - Created
#endregion                          


using System;
using System.Collections.Generic;
using System.Linq;
using System.Web;

using LaMPServices.Authentication;
using OpenRasta.Web;
using OpenRasta.Security;

namespace LaMPServices.Handlers
{
    public class OrganizationHandler:HandlerBase
    {

        #region Routed Methods
        #region GetMethods

        [RequiresAuthentication]
        [HttpOperation(HttpMethod.GET)]
        public OperationResult Get()
        {
            List<ORGANIZATION> orgs;

            //Get basic authentication password
            using (EasySecureString securedPassword = GetSecuredPassword())
            {
                using (LaMPDSEntities aLaMPRDS = GetRDS(securedPassword))
                {

                    orgs = aLaMPRDS.ORGANIZATIONS.OrderBy(o => o.ORGANIZATION_ID).ToList();

                }//end using
            }//end using

            return new OperationResult.OK { ResponseResource = orgs };
        }//end httpMethod get

        [RequiresAuthentication]
        [HttpOperation(HttpMethod.GET)]
        public OperationResult Get(Int32 organizationId)
        {
            ORGANIZATION aOrg;

            //return BadRequest if ther is no ID
            if (organizationId <= 0)
            {
                return new OperationResult.BadRequest();
            }

            //Get basic authentication password
            using (EasySecureString securedPassword = GetSecuredPassword())
            {
                using (LaMPDSEntities aLaMPRDS = GetRDS(securedPassword))
                {

                    aOrg = aLaMPRDS.ORGANIZATIONS.Single(o => o.ORGANIZATION_ID == organizationId);

                }//end using
            }//end using

            return new OperationResult.OK { ResponseResource = aOrg };
        }//end httpMethod get

        #endregion

        #region PostMethods
        /// 
        /// Force the user to provide authentication 
        /// 
        [RequiresAuthentication]
        [HttpOperation(HttpMethod.POST)]
        public OperationResult Post(ORGANIZATION aOrg)
        {
            //Return BadRequest if missing required fields
            if (String.IsNullOrEmpty(aOrg.NAME) && String.IsNullOrEmpty(aOrg.SHORTNAME))
            {
                return new OperationResult.BadRequest();
            }

            //Get basic authentication password
            using (EasySecureString securedPassword = GetSecuredPassword())
            {
                using (LaMPDSEntities aLaMPRDS = GetRDS(securedPassword))
                {
                    //check if it exists
                    ORGANIZATION existingOrg = aLaMPRDS.ORGANIZATIONS.FirstOrDefault(o => o.NAME.Trim().ToUpper() == aOrg.NAME.Trim().ToUpper() ||
                                                                                            o.SHORTNAME.Trim().ToUpper() == aOrg.SHORTNAME.Trim().ToUpper() &&
                                                                                            (o.DIVISION.Trim().ToUpper() == aOrg.DIVISION.Trim().ToUpper() || string.IsNullOrEmpty(aOrg.DIVISION)));
                    if (existingOrg == null)
	                {
                        decimal nextKey = 1;
                        if (aLaMPRDS.ORGANIZATIONS.Count() > 0)
                        {
                            nextKey = aLaMPRDS.ORGANIZATIONS.OrderByDescending(o => o.ORGANIZATION_ID).First().ORGANIZATION_ID + 1;
                        }

                        //set ID
                        aOrg.ORGANIZATION_ID = nextKey;

                        aLaMPRDS.ORGANIZATIONS.AddObject(aOrg);

                        aLaMPRDS.SaveChanges();
	                }
                    else
                    {
                        //return existing organization
                        aOrg = existingOrg;  
                    }
               
                }// end using

            }// end using

            //Return object to verify persisitance
            return new OperationResult.OK { ResponseResource = aOrg };
        }

        [RequiresAuthentication]
        [HttpOperation(HttpMethod.POST, ForUriName = "CreateOrganizationList")]
        public OperationResult Post(List<ORGANIZATION> aOrganizations)
        {
            //Return BadRequest if missing required fields
            if (aOrganizations.Count <= 0)
            {
                return new OperationResult.BadRequest();
            }

            //Get basic authentication password
            using (EasySecureString securedPassword = GetSecuredPassword())
            {
                using (LaMPDSEntities aLaMPRDS = GetRDS(securedPassword))
                {
                    decimal nextKey = 1;
                    if (aLaMPRDS.ORGANIZATIONS.Count() > 0)
                    {
                        nextKey = aLaMPRDS.ORGANIZATIONS.OrderByDescending(o => o.ORGANIZATION_ID).First().ORGANIZATION_ID + 1;
                    }

                    foreach (ORGANIZATION item in aOrganizations)
                    {
                        //update database ID
                        item.ORGANIZATION_ID = nextKey;
                        aLaMPRDS.ORGANIZATIONS.AddObject(item);

                        nextKey += 1;

                    }//next item

                    aLaMPRDS.SaveChanges();
                }// end using
            }// end using

            //Return object to verify persisitance
            return new OperationResult.OK { ResponseResource = aOrganizations };
        }
        #endregion

        #region PutMethods

        [RequiresAuthentication]
        [HttpOperation(HttpMethod.PUT, ForUriName = "UpdateOrganization")]
        public OperationResult Post(Int32 OrgId, ORGANIZATION instance)
        {
            //Return BadRequest if missing required fields
            if ((OrgId <= 0))
            {return new OperationResult.BadRequest();}


            //Get basic authentication password
            using (EasySecureString securedPassword = GetSecuredPassword())
            {
                using (LaMPDSEntities aLaMPRDS = GetRDS(securedPassword))
                {
                    //fetch the object to be updated (assuming that it exists)
                    ORGANIZATION ObjectToBeUpdated = aLaMPRDS.ORGANIZATIONS.Single(o => o.ORGANIZATION_ID == OrgId);

                    //Name
                    ObjectToBeUpdated.NAME = (string.IsNullOrEmpty(instance.NAME) ?
                        ObjectToBeUpdated.NAME : instance.NAME);
                
                    //State
                    ObjectToBeUpdated.STATE = (string.IsNullOrEmpty(instance.STATE) ?
                        ObjectToBeUpdated.STATE : instance.STATE);

                    //ShortName
                    ObjectToBeUpdated.SHORTNAME = (string.IsNullOrEmpty(instance.SHORTNAME) ?
                        ObjectToBeUpdated.SHORTNAME : instance.SHORTNAME);

<<<<<<< .mine                //Division
                ObjectToBeUpdated.DIVISION = (string.IsNullOrEmpty(instance.DIVISION) ?
                    ObjectToBeUpdated.DIVISION : instance.DIVISION);
=======                    //ShortName
                    ObjectToBeUpdated.DIVISION = (string.IsNullOrEmpty(instance.DIVISION) ?
                        ObjectToBeUpdated.DIVISION : instance.DIVISION);
>>>>>>> .theirs
                //Section
                ObjectToBeUpdated.SECTION = (string.IsNullOrEmpty(instance.SECTION) ?
                    ObjectToBeUpdated.SECTION : instance.SECTION);
                
                    aLaMPRDS.SaveChanges();
                }// end using

            }// end using

            //Return object to verify persisitance
            return new OperationResult.OK { ResponseResource = instance };
        }


        #endregion

        #region DeleteMethods

        [RequiresAuthentication]
        [HttpOperation(HttpMethod.DELETE, ForUriName = "DeleteOrganization")]
        public OperationResult Post(Int32 OrgId)
        {
            //Return BadRequest if missing required fields
            if (OrgId <= 0)
            { return new OperationResult.BadRequest();}


            //Get basic authentication password
            using (EasySecureString securedPassword = GetSecuredPassword())
            {
                using (LaMPDSEntities aLaMPRDS = GetRDS(securedPassword))
                {
                    //fetch the object to be updated (assuming that it exists)
                    ORGANIZATION ObjectToBeDeleted = aLaMPRDS.ORGANIZATIONS.Single(o => o.ORGANIZATION_ID == OrgId);
                    //delete it
                    aLaMPRDS.ORGANIZATIONS.DeleteObject(ObjectToBeDeleted);

                    aLaMPRDS.SaveChanges();

                }// end using
            }// end using

            //Return object to verify persisitance
            return new OperationResult.OK { };
        }

        #endregion

        #endregion
     
    }//end OrganizationHandler
}//end namespace