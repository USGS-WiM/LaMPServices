//------------------------------------------------------------------------------
//----- OrganizationHandler -----------------------------------------------------------
//------------------------------------------------------------------------------

//-------1---------2---------3---------4---------5---------6---------7---------8
//       01234567890123456789012345678901234567890123456789012345678901234567890
//-------+---------+---------+---------+---------+---------+---------+---------+

// copyright:   2012 WiM - USGS

//    authors:  Jeremy K. Newson USGS Wisconsin Internet Mapping
//              
//  
//   purpose:   Handles Organizations resources through the HTTP uniform interface.
//              Equivalent to the controller in MVC.
//
//discussion:   Handlers are objects which handle all interaction with resources in 
//              this case the resources are POCO classes derived from the EF. 
//               https://github.com/openrasta/openrasta/wiki/Handlers
//
//     
#region Comments
// 04.26.12 - jkn - Created
#endregion                          


using System;
using System.Collections.Generic;
using System.Linq;
using System.Web;

using LaMPServices.Authentication;
using OpenRasta.Web;
using OpenRasta.Security;

namespace LaMPServices.Handlers
{
    public class OrganizationHandler
    {

        #region Properties

        // will be automatically injected by DI in OpenRasta
        public ICommunicationContext Context { get; set; }

        private string connectionString = @"metadata=res://*/LaMPDSModel.csdl|res://*/LaMPDSModel.ssdl|res://*/LaMPDSModel.msl;provider=Oracle.DataAccess.Client;provider connection string=""DATA SOURCE=LAMPRDS;USER ID={0};PASSWORD={1}""";

        #endregion

        #region Routed Methods

        #region GetMethods
        [HttpOperation(HttpMethod.GET)]
        public OperationResult Get()
        {
            List<ORGANIZATION> orgs;

            //Get basic authentication password
            // using (EasySecureString securedPassword = new EasySecureString(
            //                        LaMPBasicAuthentication.ExtractBasicHeader(Context.Request.Headers["Authorization"]).Password))
            /// {
            using (LaMPDSEntities Context = new LaMPDSEntities(string.Format(connectionString, "lampadmin", "cafOR4_yR")))
            {

                orgs = Context.ORGANIZATIONS.OrderBy(o => o.ORGANIZATION_ID).ToList();

            }//end using
            //  }//end using

            return new OperationResult.OK { ResponseResource = orgs };
        }//end httpMethod get


        [HttpOperation(HttpMethod.GET)]
        public OperationResult Get(Int32 organizationId)
        {
            ORGANIZATION aOrg;

            //return BadRequest if ther is no ID
            if (organizationId <= 0)
            {
                return new OperationResult.BadRequest();
            }

            //Get basic authentication password
            // using (EasySecureString securedPassword = new EasySecureString(
            //                        LaMPBasicAuthentication.ExtractBasicHeader(Context.Request.Headers["Authorization"]).Password))
            /// {
            using (LaMPDSEntities Context = new LaMPDSEntities(string.Format(connectionString, "lampadmin", "cafOR4_yR")))
            {

                aOrg = Context.ORGANIZATIONS.Single(o => o.ORGANIZATION_ID == organizationId);


            }//end using
            //  }//end using

            return new OperationResult.OK { ResponseResource = aOrg };
        }//end httpMethod get

        #endregion

        #region PostMethods
        /// 
        /// Force the user to provide authentication 
        /// 
        //[RequiresAuthentication]
        [HttpOperation(HttpMethod.POST)]
        public OperationResult Post(ORGANIZATION aOrg)
        {
            //Return BadRequest if missing required fields
            if (String.IsNullOrEmpty(aOrg.NAME) && String.IsNullOrEmpty(aOrg.SHORTNAME))
            {
                return new OperationResult.BadRequest();
            }

            //Get basic authentication password
            //using (EasySecureString securedPassword = new EasySecureString(
            //                      LaMPBasicAuthentication.ExtractBasicHeader(Context.Request.Headers["Authorization"]).Password))
            //{
            using (LaMPDSEntities Context = new LaMPDSEntities(string.Format(connectionString, "lampadmin", "cafOR4_yR")))
            {
                //check if it exists
                ORGANIZATION existingOrg = Context.ORGANIZATIONS.FirstOrDefault(o => o.NAME.Trim().ToUpper() == aOrg.NAME.Trim().ToUpper() ||
                                                                                     o.SHORTNAME.Trim().ToUpper() == aOrg.SHORTNAME.Trim().ToUpper() &&
                                                                                     (o.DIVISION.Trim().ToUpper() == aOrg.DIVISION.Trim().ToUpper() || string.IsNullOrEmpty(aOrg.DIVISION)));
                if (existingOrg == null)
	            {
		            //create it
                    decimal nextEntityId = 0;
                    //Increment Key
                    ORGANIZATION lastEntity = Context.ORGANIZATIONS.OrderByDescending(o => o.ORGANIZATION_ID).FirstOrDefault();
                    if (lastEntity != null) nextEntityId = lastEntity.ORGANIZATION_ID + 1;

                    aOrg.ORGANIZATION_ID = nextEntityId;

                    Context.ORGANIZATIONS.AddObject(aOrg);

                    Context.SaveChanges();
	            }
                else
                {
                    //return existing organization
                    aOrg = existingOrg;  
                }

                //List<ORGANIZATION> existingOrgList = Context.ORGANIZATIONS.Where(o => o.NAME.Trim().ToUpper() == aOrg.NAME.Trim().ToUpper() ||
                //                                                                      o.SHORTNAME.Trim().ToUpper() == aOrg.SHORTNAME.Trim().ToUpper() ||
                //                                                                      o.DIVISION.Trim().ToUpper() == aOrg.DIVISION.Trim().ToUpper()).ToList();


                //if(existingOrgList == null || existingOrgList.Count == 0)
                //{
                //    //create it
                //    decimal nextEntityId = 0;
                //    //Increment Key
                //    ORGANIZATION lastEntity = Context.ORGANIZATIONS.OrderByDescending(o => o.ORGANIZATION_ID).FirstOrDefault();
                //    if (lastEntity != null) nextEntityId = lastEntity.ORGANIZATION_ID + 1;

                //    aOrg.ORGANIZATION_ID = nextEntityId;

                //    Context.ORGANIZATIONS.AddObject(aOrg);

                //    Context.SaveChanges();
                //}
                //else if (existingOrgList.Count > 0 && string.IsNullOrEmpty(aOrg.DIVISION))
                //{
                //    //take the best fit one
                //    aOrg = existingOrgList.FirstOrDefault(o => string.IsNullOrEmpty(o.DIVISION) && 
                //                                                o.SHORTNAME.Trim().ToUpper() == aOrg.SHORTNAME.Trim().ToUpper());
                //}
                //else //take the first one
                //{
                //    //return existing organization
                //    aOrg = existingOrgList[0];  
                //}
                
               
            }// end using

            // } end using

            //Return object to verify persisitance
            return new OperationResult.OK { ResponseResource = aOrg };
        }

        //[RequiresAuthentication]
        [HttpOperation(HttpMethod.POST, ForUriName = "CreateOrganizationList")]
        public OperationResult Post(List<ORGANIZATION> aOrganizations)
        {
            //Return BadRequest if missing required fields
            if (aOrganizations.Count <= 0)
            {
                return new OperationResult.BadRequest();
            }

            //Get basic authentication password
            //using (EasySecureString securedPassword = new EasySecureString(
            //                      LaMPBasicAuthentication.ExtractBasicHeader(Context.Request.Headers["Authorization"]).Password))
            //{
            using (LaMPDSEntities Context = new LaMPDSEntities(string.Format(connectionString, "lampadmin", "cafOR4_yR")))
            {
                //get last key in repository
                decimal nextEntityId = 0;
                //Increment Key
                ORGANIZATION lastEntity = Context.ORGANIZATIONS.OrderByDescending(o => o.ORGANIZATION_ID).FirstOrDefault();
                if (lastEntity != null) nextEntityId = lastEntity.ORGANIZATION_ID + 1;

                foreach (ORGANIZATION item in aOrganizations)
                {
                    //update database ID
                    item.ORGANIZATION_ID = nextEntityId;
                    Context.ORGANIZATIONS.AddObject(item);

                    nextEntityId += 1;

                }//next item

                Context.SaveChanges();
            }// end using

            //} end using

            //Return object to verify persisitance
            return new OperationResult.OK { ResponseResource = aOrganizations };
        }
        #endregion

        #region PutMethods

        [RequiresAuthentication]
        [HttpOperation(HttpMethod.PUT, ForUriName = "UpdateOrganization")]
        public OperationResult Post(Int32 OrgId, ORGANIZATION instance)
        {
            //Return BadRequest if missing required fields
            if ((OrgId <= 0))
            {
                return new OperationResult.BadRequest();
            }


            //Get basic authentication password
            //using (EasySecureString securedPassword = new EasySecureString(
            //                      LaMPBasicAuthentication.ExtractBasicHeader(Context.Request.Headers["Authorization"]).Password))
            //{
            using (LaMPDSEntities Context = new LaMPDSEntities(string.Format(connectionString, "lampadmin", "cafOR4_yR")))
            {
                //fetch the object to be updated (assuming that it exists)
                ORGANIZATION ObjectToBeUpdated = Context.ORGANIZATIONS.Single(o => o.ORGANIZATION_ID == OrgId);

                //Name
                ObjectToBeUpdated.NAME = (string.IsNullOrEmpty(instance.NAME) ?
                    ObjectToBeUpdated.NAME : instance.NAME);
                
                //State
                ObjectToBeUpdated.STATE = (string.IsNullOrEmpty(instance.STATE) ?
                    ObjectToBeUpdated.STATE : instance.STATE);

                //ShortName
                ObjectToBeUpdated.SHORTNAME = (string.IsNullOrEmpty(instance.SHORTNAME) ?
                    ObjectToBeUpdated.SHORTNAME : instance.SHORTNAME);

                //ShortName
                ObjectToBeUpdated.DIVISION = (string.IsNullOrEmpty(instance.DIVISION) ?
                    ObjectToBeUpdated.DIVISION : instance.DIVISION);
                
                Context.SaveChanges();
            }// end using

            // } end using

            //Return object to verify persisitance
            return new OperationResult.OK { ResponseResource = instance };
        }


        #endregion

        #region DeleteMethods

        [RequiresAuthentication]
        [HttpOperation(HttpMethod.DELETE, ForUriName = "DeleteOrganization")]
        public OperationResult Post(Int32 OrgId)
        {
            //Return BadRequest if missing required fields
            if (OrgId <= 0)
            {
                return new OperationResult.BadRequest();
            }


            //Get basic authentication password
            //using (EasySecureString securedPassword = new EasySecureString(
            //                      LaMPBasicAuthentication.ExtractBasicHeader(Context.Request.Headers["Authorization"]).Password))
            //{
            using (LaMPDSEntities Context = new LaMPDSEntities(string.Format(connectionString, "lampadmin", "cafOR4_yR")))
            {
                //fetch the object to be updated (assuming that it exists)
                ORGANIZATION ObjectToBeDeleted = Context.ORGANIZATIONS.Single(o => o.ORGANIZATION_ID == OrgId);
                //delete it
                Context.ORGANIZATIONS.DeleteObject(ObjectToBeDeleted);

                Context.SaveChanges();

            }// end using

            // } end using

            //Return object to verify persisitance
            return new OperationResult.OK { };
        }

        #endregion

        #endregion

        #region Helper Methods

        #endregion


    }//end OrganizationHandler
}//end namespace