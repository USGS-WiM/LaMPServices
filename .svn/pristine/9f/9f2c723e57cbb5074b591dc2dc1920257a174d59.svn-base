//------------------------------------------------------------------------------
//----- StatusTypeHandler -----------------------------------------------------------
//------------------------------------------------------------------------------

//-------1---------2---------3---------4---------5---------6---------7---------8
//       01234567890123456789012345678901234567890123456789012345678901234567890
//-------+---------+---------+---------+---------+---------+---------+---------+

// copyright:   2012 WiM - USGS

//    authors:  Jeremy K. Newson USGS Wisconsin Internet Mapping
//              
//  
//   purpose:   Handles media type resources through the HTTP uniform interface.
//              Equivalent to the controller in MVC.
//
//discussion:   Handlers are objects which handle all interaction with resources in 
//              this case the resources are POCO classes derived from the EF. 
//               https://github.com/openrasta/openrasta/wiki/Handlers
//
//     
#region Comments
// 08.21.12 - jkn - Created
#endregion


using System;
using System.Collections.Generic;
using System.Linq;
using System.Web;

using LaMPServices.Authentication;
using OpenRasta.Web;
using OpenRasta.Security;

namespace LaMPServices.Handlers
{
    public class StatusTypeHandler:HandlerBase
    {
        #region Routed Methods

        #region GetMethods
        
        [HttpOperation(HttpMethod.GET)]
        public OperationResult Get()
        {
            List<STATUS_TYPE> statusTypes;

            //Get basic authentication password
            using (EasySecureString securedPassword = GetSecuredPassword())
            {
                using (LaMPDSEntities aLaMPRDS = GetRDS(securedPassword))
                {
                    statusTypes = aLaMPRDS.STATUS_TYPE.OrderBy(s => s.STATUS_ID).ToList();
                }//end using
            }//end using

            return new OperationResult.OK { ResponseResource = statusTypes };
        }//end httpMethod get
        
        [HttpOperation(HttpMethod.GET)]
        public OperationResult Get(Int32 statusTypeID)
        {
            STATUS_TYPE aStatusType;

            //return BadRequest if ther is no ID
            if (statusTypeID <= 0)
            {
                return new OperationResult.BadRequest();
            }

            //Get basic authentication password
            using (EasySecureString securedPassword = GetSecuredPassword())
            {
                using (LaMPDSEntities aLaMPRDS = GetRDS(securedPassword))
                {
                    aStatusType = aLaMPRDS.STATUS_TYPE.SingleOrDefault(s => s.STATUS_ID == statusTypeID);
                }//end using
            }//end using

            return new OperationResult.OK { ResponseResource = aStatusType };
        }//end httpMethod get

        #endregion
        #endregion
        
    }//end StatusTypeHandler
}//end namespace