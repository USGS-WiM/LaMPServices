//------------------------------------------------------------------------------
//----- Configuration -----------------------------------------------------------
//------------------------------------------------------------------------------

//-------1---------2---------3---------4---------5---------6---------7---------8
//       01234567890123456789012345678901234567890123456789012345678901234567890
//-------+---------+---------+---------+---------+---------+---------+---------+

// copyright:   2012 WiM - USGS

//    authors:  Jeremy K. Newson USGS Kentucky Water Science Center
//              
//  
//   purpose:   Configuration implements the IConfiurationSource interface. OpenRasta
//              will call the Configure method and use it to configure the application 
//              through a fluent interface using the Resource space as root objects. 
//
//discussion:   The ResourceSpace is where you can define the resources in the application and what
//              handles them and how thy are represented. 
//              https://github.com/openrasta/openrasta/wiki/Configuration
//
//     
#region Comments
// 04.15.12 - jkn - Created
#endregion                          
using System;
using System.Collections.Generic;
using System.Linq;
using System.Web;
using System.Data.Objects.DataClasses;

using OpenRasta.Authentication;
using OpenRasta.Authentication.Basic;
using OpenRasta.Codecs;
using OpenRasta.Codecs.WebForms;
using OpenRasta.Configuration;
using OpenRasta.DI;
using OpenRasta.IO;
using OpenRasta.Pipeline.Contributors;
using OpenRasta.Web.UriDecorators;

using LaMPServices.Handlers;
using LaMPServices.Codecs;
using LaMPServices.Resources;
using LaMPServices.Authentication;


namespace LaMPServices
{
    public class Configuration:IConfigurationSource
    {
        public void Configure()
        {
            using (OpenRastaConfiguration.Manual)
            {
                // specify the authentication scheme you want to use, you can register multiple ones
                ResourceSpace.Uses.CustomDependency<IAuthenticationScheme, BasicAuthenticationScheme>(DependencyLifetime.Singleton);

                // register your basic authenticator in the DI resolver
                ResourceSpace.Uses.CustomDependency<IBasicAuthenticator, LaMPBasicAuthentication>(DependencyLifetime.Transient);

                // Allow codec choice by extension 
                ResourceSpace.Uses.UriDecorator<ContentTypeExtensionUriDecorator>(); 

                AddCATALOG_Resources();
                AddCONTACT_Resources();
                AddFREQUENCY_TYPE_Resources();
                AddKEYWORD_Resources();
                AddLOCATION_Resources();
                AddMEDIA_TYPE_Resources();
                AddORGANIZATION_Resources();
                AddPARAMETER_TYPE_Resources();
                AddPROJECT_Resources();
                AddPUBLICATION_Resources();
                AddRESOURCE_TYPE_Resources();
                AddLAMP_GROUP_TYPE_Resources();
                AddSTATUS_TYPE_Resources();
                AddAUTHENTICATION_Resources();
                
                //AddCATALOG_PARAMETER_Resources();
                //AddPROJECT_CONTACTS_Resources();
                //AddPROJECT_KEYWORD_Resources();
                //AddPROJECT_PUBLICATION_Resources();
                //AddPROJECT_COOPERATOR_Resources();

            }//End using OpenRastaConfiguration.Manual


        }//End Configure()

        #region Helper methods
             
        private void AddCATALOG_Resources()
        {
            //CATALOGS
            ResourceSpace.Has.ResourcesOfType<List<CATALOG_>>()
               .AtUri("/catalogs")
               .HandledBy<CatalogHandler>()
               .TranscodedBy<SimpleUTF8XmlSerializerCodec>();

            ResourceSpace.Has.ResourcesOfType<CATALOG_>()
                .AtUri("/catalogs/{catalogId}")
                .HandledBy<CatalogHandler>()
                .TranscodedBy<SimpleUTF8XmlSerializerCodec>();
        }//end AddCATALOG_Resources
        private void AddCONTACT_Resources()
        {

            //Contacts
            ResourceSpace.Has.ResourcesOfType<List<CONTACT>>()
                .AtUri("/contacts")
                .HandledBy<ContactHandler>()
                .TranscodedBy<SimpleUTF8XmlSerializerCodec>();

            ResourceSpace.Has.ResourcesOfType<CONTACT>()
                .AtUri("/contacts/{contactId}")
                .HandledBy<ContactHandler>()
                .TranscodedBy<SimpleUTF8XmlSerializerCodec>();

        }//end AddCONTACT_Resources
        private void AddFREQUENCY_TYPE_Resources()
        {
            //FREQUENCY_TYPE
            ResourceSpace.Has.ResourcesOfType<List<FREQUENCY_TYPE>>()
               .AtUri("/frequencyTypes")
               .HandledBy<FrequencyTypeHandler>()
               .TranscodedBy<SimpleUTF8XmlSerializerCodec>();

            ResourceSpace.Has.ResourcesOfType<FREQUENCY_TYPE>()
                .AtUri("/frequencyTypes/{frequencyTypeId}")
                .HandledBy<FrequencyTypeHandler>()
                .TranscodedBy<SimpleUTF8XmlSerializerCodec>();

        }//end addFREQUENCY_TYPE_Resources
        private void AddKEYWORD_Resources()
        {
            //KEYWORDS
            ResourceSpace.Has.ResourcesOfType<List<KEYWORD>>()
                .AtUri("/keywords")
                .HandledBy<KeywordHandler>()
                .TranscodedBy<SimpleUTF8XmlSerializerCodec>();

            ResourceSpace.Has.ResourcesOfType<KEYWORD>()
                .AtUri("/keywords/{keywordId}")
                .HandledBy<KeywordHandler>()
                .TranscodedBy<SimpleUTF8XmlSerializerCodec>();

        }//end AddKEYWORD_Resources
        private void AddLOCATION_Resources()
        {
            //LOCATIONS
            ResourceSpace.Has.ResourcesOfType<List<LOCATION>>()
               .AtUri("/locations")
               .HandledBy<LocationHandler>()
               .TranscodedBy<SimpleUTF8XmlSerializerCodec>();

            ResourceSpace.Has.ResourcesOfType<LOCATION>()
                .AtUri("/locations/{locationId}")
                .HandledBy<LocationHandler>()
                .TranscodedBy<SimpleUTF8XmlSerializerCodec>();
        }//end AddLOCATION_Resources
        private void AddMEDIA_TYPE_Resources()
        {
            //MEDIA_TYPE
            ResourceSpace.Has.ResourcesOfType<List<MEDIA_TYPE>>()
               .AtUri("/mediaTypes")
               .HandledBy<MediaTypeHandler>()
               .TranscodedBy<SimpleUTF8XmlSerializerCodec>();

            ResourceSpace.Has.ResourcesOfType<MEDIA_TYPE>()
                .AtUri("/mediaTypes/{mediaTypeId}")
                .HandledBy<MediaTypeHandler>()
                .TranscodedBy<SimpleUTF8XmlSerializerCodec>();

        }//end addMEDIA_TYPE_Resources
        private void AddORGANIZATION_Resources()
        {
            //ORGANIZATION
            ResourceSpace.Has.ResourcesOfType<List<ORGANIZATION>>()
               .AtUri("/organizations")
               .HandledBy<OrganizationHandler>()
               .TranscodedBy<SimpleUTF8XmlSerializerCodec>();

            ResourceSpace.Has.ResourcesOfType<ORGANIZATION>()
                .AtUri("/organizations/{organizationId}")
                .HandledBy<OrganizationHandler>()
                .TranscodedBy<SimpleUTF8XmlSerializerCodec>();
        }//end AddORGANIZATION_Resources
        private void AddPARAMETER_TYPE_Resources()
        {
            //PARAMETER_TYPE
            ResourceSpace.Has.ResourcesOfType<List<PARAMETER_TYPE>>()
               .AtUri("/parameterTypes")
               .HandledBy<ParameterTypeHandler>()
               .TranscodedBy<SimpleUTF8XmlSerializerCodec>();

            ResourceSpace.Has.ResourcesOfType<PARAMETER_TYPE>()
                .AtUri("/parameterTypes/{parameterTypeId}")
                .HandledBy<ParameterTypeHandler>()
                .TranscodedBy<SimpleUTF8XmlSerializerCodec>();

        }//end addPARAMETER_TYPE_Resources
        private void AddPROJECT_Resources()
        {
            //PROJECT
            ResourceSpace.Has.ResourcesOfType<List<PROJECT>>()
               .AtUri("/projects")
               .HandledBy<ProjectHandler>()
               .TranscodedBy<SimpleUTF8XmlSerializerCodec>();

            ResourceSpace.Has.ResourcesOfType<PROJECT>()
                .AtUri("/projects/{projectId}")
                .HandledBy<ProjectHandler>()
                .TranscodedBy<SimpleUTF8XmlSerializerCodec>();
        }//end AddPROJECT_Resources
        private void AddPUBLICATION_Resources()
        {
            //PUBLICATIONS
            ResourceSpace.Has.ResourcesOfType<List<PUBLICATION>>()
               .AtUri("/publications")
               .HandledBy<PublicationHandler>()
               .TranscodedBy<SimpleUTF8XmlSerializerCodec>();

            ResourceSpace.Has.ResourcesOfType<PUBLICATION>()
                .AtUri("/publications/{publicationId}")
                .HandledBy<PublicationHandler>()
                .TranscodedBy<SimpleUTF8XmlSerializerCodec>();
        }//end AddPUBLICATION_Resources
        private void AddRESOURCE_TYPE_Resources()
        {
            //RESOURCE_TYPE
            ResourceSpace.Has.ResourcesOfType<List<RESOURCE_TYPE>>()
               .AtUri("/resourceTypes")
               .HandledBy<ResourceTypeHandler>()
               .TranscodedBy<SimpleUTF8XmlSerializerCodec>();

            ResourceSpace.Has.ResourcesOfType<RESOURCE_TYPE>()
                .AtUri("/resourceTypes/{resourceTypeId}")
                .HandledBy<ResourceTypeHandler>()
                .TranscodedBy<SimpleUTF8XmlSerializerCodec>();
        }//end AddRESOURCE_TYPE_Resources
        private void AddLAMP_GROUP_TYPE_Resources()
        {
            ResourceSpace.Has.ResourcesOfType<List<LAMP_GROUP_TYPE>>()
               .AtUri("/laMPGroupTypes")
               .HandledBy<LaMPGroupTypeHandler>()
               .TranscodedBy<SimpleUTF8XmlSerializerCodec>();

            ResourceSpace.Has.ResourcesOfType<LAMP_GROUP_TYPE>()
                .AtUri("/laMPGroupTypes/{laMPGroupTypeId}")
                .HandledBy<LaMPGroupTypeHandler>()
                .TranscodedBy<SimpleUTF8XmlSerializerCodec>();
        }//end AddLAMP_GROUP_TYPE_Resources
        private void AddSTATUS_TYPE_Resources()
        {
            ResourceSpace.Has.ResourcesOfType<List<STATUS_TYPE>>()
               .AtUri("/statusTypes")
               .HandledBy<StatusTypeHandler>()
               .TranscodedBy<SimpleUTF8XmlSerializerCodec>();

            ResourceSpace.Has.ResourcesOfType<STATUS_TYPE>()
                .AtUri("/statusTypes/{statusTypeId}")
                .HandledBy<StatusTypeHandler>()
                .TranscodedBy<SimpleUTF8XmlSerializerCodec>();
        }//end AddLAMP_GROUP_TYPE_Resources

        private void AddAUTHENTICATION_Resources()
        {
            //Authentication
            ResourceSpace.Has.ResourcesOfType<Boolean>()
            .AtUri("/login")
            .HandledBy<LoginHandler>()
            .TranscodedBy<UTF8XmlSerializerCodec>();

        }//end AddAUTHENTICATION_Resources

        //private void AddCATALOG_PARAMETER_Resources()
        //{
        //    ResourceSpace.Has.ResourcesOfType<List<CATALOG_PARAMETERS>>()
        //       .AtUri("/catalogParameters")
        //       .HandledBy<CatalogParameterHandler>()
        //       .TranscodedBy<SimpleUTF8XmlSerializerCodec>();

        //    ResourceSpace.Has.ResourcesOfType<CATALOG_PARAMETERS>()
        //        .AtUri("/catalogParameters/{catalogParameterID}")
        //        .HandledBy<CatalogParameterHandler>()
        //        .TranscodedBy<SimpleUTF8XmlSerializerCodec>();
        //}//end AddCATALOG_PARAMETER_Resources
        //private void AddPROJECT_CONTACTS_Resources()
        //{
        //    ResourceSpace.Has.ResourcesOfType<List<PROJECT_CONTACTS>>()
        //       .AtUri("/projectContacts")
        //       .HandledBy<ProjectContactsHandler>()
        //       .TranscodedBy<SimpleUTF8XmlSerializerCodec>();

        //    ResourceSpace.Has.ResourcesOfType<PROJECT_CONTACTS>()
        //        .AtUri("/projectContacts/{projectContactID}")
        //        .HandledBy<ProjectContactsHandler>()
        //        .TranscodedBy<SimpleUTF8XmlSerializerCodec>();
        //}//end AddPROJECT_CONTACTS_Resources
        //private void AddPROJECT_KEYWORD_Resources()
        //{
        //    ResourceSpace.Has.ResourcesOfType<List<PROJECT_KEYWORDS>>()
        //       .AtUri("/projectKeywords")
        //       .HandledBy<ProjectKeywordHandler>()
        //       .TranscodedBy<SimpleUTF8XmlSerializerCodec>();

        //    ResourceSpace.Has.ResourcesOfType<PROJECT_KEYWORDS>()
        //        .AtUri("/projectContacts/{projectKeywordID}")
        //        .HandledBy<ProjectKeywordHandler>()
        //        .TranscodedBy<SimpleUTF8XmlSerializerCodec>();
        //}//end AddPROJECT_KEYWORD_Resources
        //private void AddPROJECT_PUBLICATION_Resources()
        //{
        //    ResourceSpace.Has.ResourcesOfType<List<PROJECT_PUBLICATIONS>>()
        //       .AtUri("/projectPublications")
        //       .HandledBy<ProjectPublicationsHandler>()
        //       .TranscodedBy<SimpleUTF8XmlSerializerCodec>();

        //    ResourceSpace.Has.ResourcesOfType<PROJECT_PUBLICATIONS>()
        //        .AtUri("/projectPublications/{projectPublicationID}")
        //        .HandledBy<ProjectPublicationsHandler>()
        //        .TranscodedBy<SimpleUTF8XmlSerializerCodec>();
        //}//end AddPROJECT_PUBLICATION_Resources
        //private void AddPROJECT_COOPERATOR_Resources()
        //{
        //    ResourceSpace.Has.ResourcesOfType<List<PROJECT_COOPERATORS>>()
        //       .AtUri("/projectCooperators")
        //       .HandledBy<ProjectCooperatorHandler>()
        //       .TranscodedBy<SimpleUTF8XmlSerializerCodec>();

        //    ResourceSpace.Has.ResourcesOfType<PROJECT_COOPERATORS>()
        //        .AtUri("/projectCooperators/{projectCooperatorID}")
        //        .HandledBy<ProjectCooperatorHandler>()
        //        .TranscodedBy<SimpleUTF8XmlSerializerCodec>();
        //}//end AddPROJECT_COOPERATOR_Resources
        #endregion

    }//End class Configuration
}//End namespace