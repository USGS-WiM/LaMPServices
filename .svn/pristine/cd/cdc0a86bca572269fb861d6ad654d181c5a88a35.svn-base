//------------------------------------------------------------------------------
//----- ResourceTypeHandler -----------------------------------------------------------
//------------------------------------------------------------------------------

//-------1---------2---------3---------4---------5---------6---------7---------8
//       01234567890123456789012345678901234567890123456789012345678901234567890
//-------+---------+---------+---------+---------+---------+---------+---------+

// copyright:   2012 WiM - USGS

//    authors:  Jeremy K. Newson USGS Wisconsin Internet Mapping
//              
//  
//   purpose:   Handles resource type resources through the HTTP uniform interface.
//              Equivalent to the controller in MVC.
//
//discussion:   Handlers are objects which handle all interaction with resources in 
//              this case the resources are POCO classes derived from the EF. 
//               https://github.com/openrasta/openrasta/wiki/Handlers
//
//     
#region Comments
// 05.02.12 - jkn - Created
#endregion   

using System;
using System.Collections.Generic;
using System.Linq;
using System.Web;

using LaMPServices.Authentication;
using OpenRasta.Web;
using OpenRasta.Security;

namespace LaMPServices.Handlers
{
    public class ResourceTypeHandler:HandlerBase
    {
        #region Routed Methods

        #region GetMethods
        [RequiresAuthentication]
        [HttpOperation(HttpMethod.GET)]
        public OperationResult Get()
        {
            List<RESOURCE_TYPE> resourceTypes;

            //Get basic authentication password
            using (EasySecureString securedPassword = GetSecuredPassword())
            {
                using (LaMPDSEntities aLaMPRDS = GetRDS(securedPassword))
                {

                    resourceTypes = aLaMPRDS.RESOURCE_TYPE.OrderBy(r => r.RESOURCE_TYPE_ID).ToList();

                }//end using
            }//end using

            return new OperationResult.OK { ResponseResource = resourceTypes };
        }//end httpMethod get

        [RequiresAuthentication]
        [HttpOperation(HttpMethod.GET)]
        public OperationResult Get(Int32 resourceTypeID)
        {
            RESOURCE_TYPE aResourceType;

            //return BadRequest if ther is no ID
            if (resourceTypeID <= 0)
            {
                return new OperationResult.BadRequest();
            }

            //Get basic authentication password
            using (EasySecureString securedPassword = GetSecuredPassword())
            {
                using (LaMPDSEntities aLaMPRDS = GetRDS(securedPassword))
                {
                    aResourceType = aLaMPRDS.RESOURCE_TYPE.Single(r => r.RESOURCE_TYPE_ID == resourceTypeID);
                
                }//end using
            }//end using

            return new OperationResult.OK { ResponseResource = aResourceType };
        }//end httpMethod get

        #endregion

        #region PostMethods
        /// 
        /// Force the user to provide authentication 
        /// 
        [LaMPRequiresRole(new string[] { AdminRole, ManagerRole })]
        [HttpOperation(HttpMethod.POST)]
        public OperationResult Post(RESOURCE_TYPE aResourceType)
        {
            //Return BadRequest if missing required fields
            if (String.IsNullOrEmpty(aResourceType.RESOURCE_NAME))
            {
                return new OperationResult.BadRequest();
            }

            //Get basic authentication password
            using (EasySecureString securedPassword = GetSecuredPassword())
            {
                using (LaMPDSEntities aLaMPRDS = GetRDS(securedPassword))
                {
                    if (!Exists(aLaMPRDS.RESOURCE_TYPE, ref aResourceType))
                    {
                        //set ID
                        aResourceType.RESOURCE_TYPE_ID = GetNextResourceID(aLaMPRDS.RESOURCE_TYPE);

                        aLaMPRDS.RESOURCE_TYPE.AddObject(aResourceType);
                        aLaMPRDS.SaveChanges();
                    }
                }// end using
            }// end using

            //Return object to verify persisitance
            return new OperationResult.OK { ResponseResource = aResourceType };
        }

        [LaMPRequiresRole(new string[] { AdminRole, ManagerRole })]
        [HttpOperation(HttpMethod.POST)]
        public OperationResult Post(List<RESOURCE_TYPE> aResourceList)
        {
            //Return BadRequest if missing required fields
            if (aResourceList.Count <= 0)
            {
                return new OperationResult.BadRequest();
            }

            //Get basic authentication password
            using (EasySecureString securedPassword = GetSecuredPassword())
            {
                using (LaMPDSEntities aLaMPRDS = GetRDS(securedPassword))
                {
                    for (int i = 0; i < aResourceList.Count; i++)
                    {
                        RESOURCE_TYPE item = aResourceList[i];
                        if (!Exists(aLaMPRDS.RESOURCE_TYPE, ref item))
                        {
                            item.RESOURCE_TYPE_ID = GetNextResourceID(aLaMPRDS.RESOURCE_TYPE);
                            aLaMPRDS.RESOURCE_TYPE.AddObject(item);
                            aLaMPRDS.SaveChanges();
                            //update
                        }
                        //update publications to pass back
                        aResourceList[i] = item;

                    }//next item
                }// end using

            }// end using

            //Return object to verify persisitance
            return new OperationResult.OK { ResponseResource = aResourceList };
        }
        #endregion

        #region PutMethods

        [LaMPRequiresRole(new string[] { AdminRole, ManagerRole })]
        [HttpOperation(HttpMethod.PUT)]
        public OperationResult Put(Int32 resourceTypeId, RESOURCE_TYPE instance)
        {
            //Return BadRequest if missing required fields
            if ((resourceTypeId <= 0))
            {return new OperationResult.BadRequest();}


            //Get basic authentication password
            using (EasySecureString securedPassword = GetSecuredPassword())
            {
                using (LaMPDSEntities aLaMPRDS = GetRDS(securedPassword))
                {
                    //fetch the object to be updated (assuming that it exists)
                    RESOURCE_TYPE ObjectToBeUpdated = aLaMPRDS.RESOURCE_TYPE.Single(r => r.RESOURCE_TYPE_ID == resourceTypeId);

                    //RESOURCE
                    ObjectToBeUpdated.RESOURCE_NAME = (string.IsNullOrEmpty(instance.RESOURCE_NAME) ?
                        ObjectToBeUpdated.RESOURCE_NAME : instance.RESOURCE_NAME);

                    aLaMPRDS.SaveChanges();
                }// end using

            }// end using

            //Return object to verify persisitance
            return new OperationResult.OK { ResponseResource = instance };
        }

        #endregion

        #region DeleteMethods

        [RequiresRole(AdminRole)]
        [HttpOperation(HttpMethod.DELETE)]
        public OperationResult Delete(Int32 resourceTypeId)
        {
            //Return BadRequest if missing required fields
            if (resourceTypeId <= 0)
            {return new OperationResult.BadRequest();}


            //Get basic authentication password
            using (EasySecureString securedPassword = GetSecuredPassword())
            {
                using (LaMPDSEntities aLaMPRDS = GetRDS(securedPassword))
                {
                    //fetch the object to be updated (assuming that it exists)
                    RESOURCE_TYPE ObjectToBeDeleted = aLaMPRDS.RESOURCE_TYPE.Single(r => r.RESOURCE_TYPE_ID == resourceTypeId);
              
                    //delete it
                    aLaMPRDS.RESOURCE_TYPE.DeleteObject(ObjectToBeDeleted);

                    aLaMPRDS.SaveChanges();

                }// end using

            }// end using

            //Return object to verify persisitance
            return new OperationResult.OK { };
        }

        #endregion

        #endregion
        #region "Helper Methods"
        private Boolean Exists(System.Data.Objects.IObjectSet<RESOURCE_TYPE> resources, ref RESOURCE_TYPE aResource)
        {
            RESOURCE_TYPE existingResource;
            RESOURCE_TYPE thisResource = aResource;
            //check if it exists
            try
            {
                existingResource = resources.FirstOrDefault(r => r.RESOURCE_NAME.Equals(thisResource.RESOURCE_NAME));

                if (existingResource == null)
                    return false;

                //if exists then update ref contact
                aResource = existingResource;
                return true;

            }
            catch (Exception)
            {
                return false;
            }
        }

        private decimal GetNextResourceID(System.Data.Objects.IObjectSet<RESOURCE_TYPE> resources)
        {
            decimal nextKey = 1;
            if (resources.Count() > 0)
            {
                nextKey = resources.OrderByDescending(r=>r.RESOURCE_TYPE_ID).First().RESOURCE_TYPE_ID + 1;
            }

            return nextKey;
        }
        #endregion
    }//end ResourceTypeHandler
}//end namespace