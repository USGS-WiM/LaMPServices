//------------------------------------------------------------------------------
//----- StatusTypeHandler -----------------------------------------------------------
//------------------------------------------------------------------------------

//-------1---------2---------3---------4---------5---------6---------7---------8
//       01234567890123456789012345678901234567890123456789012345678901234567890
//-------+---------+---------+---------+---------+---------+---------+---------+

// copyright:   2012 WiM - USGS

//    authors:  Jeremy K. Newson USGS Wisconsin Internet Mapping
//              
//  
//   purpose:   Handles media type resources through the HTTP uniform interface.
//              Equivalent to the controller in MVC.
//
//discussion:   Handlers are objects which handle all interaction with resources in 
//              this case the resources are POCO classes derived from the EF. 
//               https://github.com/openrasta/openrasta/wiki/Handlers
//
//     
#region Comments
// 04.02.13 - jkn - Created public user for get requests
// 08.21.12 - jkn - Created
#endregion


using System;
using System.Collections.Generic;
using System.Linq;
using System.Web;

using LaMPServices.Authentication;
using OpenRasta.Web;
using OpenRasta.Security;

namespace LaMPServices.Handlers
{
    public class StatusHandler:HandlerBase
    {
        #region Routed Methods

        #region GetMethods
        
        [HttpOperation(HttpMethod.GET)]
        public OperationResult Get()
        {
            List<STATUS_TYPE> statusList;

            using (LaMPDSEntities aLaMPRDS = GetRDS())
            {
                statusList = aLaMPRDS.STATUS_TYPE.OrderBy(s => s.STATUS_ID).ToList();

                if (statusList != null)
                    statusList.ForEach(x => x.LoadLinks(Context.ApplicationBaseUri.AbsoluteUri, linkType.e_group));

            }//end using

            return new OperationResult.OK { ResponseResource = statusList };
        }//end httpMethod get
        
        [HttpOperation(HttpMethod.GET)]
        public OperationResult Get(Int32 statusId)
        {
            STATUS_TYPE aStatus;

            //return BadRequest if ther is no ID
            if (statusId <= 0)
            { return new OperationResult.BadRequest();}

            using (LaMPDSEntities aLaMPRDS = GetRDS())
            {
                aStatus = aLaMPRDS.STATUS_TYPE.SingleOrDefault(s => s.STATUS_ID == statusId);

                if (aStatus != null)
                    aStatus.LoadLinks(Context.ApplicationBaseUri.AbsoluteUri, linkType.e_individual);

            }//end using

            return new OperationResult.OK { ResponseResource = aStatus };
        }//end httpMethod get

        [HttpOperation(HttpMethod.GET, ForUriName ="GetSiteStatus")]
        public OperationResult GetSiteStatus(Int32 siteId)
        {
            STATUS_TYPE aStatus;

            //return BadRequest if ther is no ID
            if (siteId <= 0)
            {return new OperationResult.BadRequest();}

            using (LaMPDSEntities aLaMPRDS = GetRDS())
            {
                aStatus = aLaMPRDS.LOCATIONS.SingleOrDefault(s => s.LOCATION_ID == siteId).STATUS_TYPE;

                if (aStatus != null)
                    aStatus.LoadLinks(Context.ApplicationBaseUri.AbsoluteUri, linkType.e_individual);

            }//end using
    
            return new OperationResult.OK { ResponseResource = aStatus };
        }//end httpMethod get

        #endregion
        #endregion
        
    }//end StatusTypeHandler
}//end namespace