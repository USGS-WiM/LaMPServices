//------------------------------------------------------------------------------
//----- LaMPGroupTypeHandler -----------------------------------------------------------
//------------------------------------------------------------------------------

//-------1---------2---------3---------4---------5---------6---------7---------8
//       01234567890123456789012345678901234567890123456789012345678901234567890
//-------+---------+---------+---------+---------+---------+---------+---------+

// copyright:   2012 WiM - USGS

//    authors:  Jeremy K. Newson USGS Wisconsin Internet Mapping
//              
//  
//   purpose:   Handles media type resources through the HTTP uniform interface.
//              Equivalent to the controller in MVC.
//
//discussion:   Handlers are objects which handle all interaction with resources in 
//              this case the resources are POCO classes derived from the EF. 
//               https://github.com/openrasta/openrasta/wiki/Handlers
//
//     
#region Comments
// 08.21.12 - jkn - Created
#endregion


using System;
using System.Collections.Generic;
using System.Linq;
using System.Web;

using LaMPServices.Authentication;
using OpenRasta.Web;
using OpenRasta.Security;

namespace LaMPServices.Handlers
{
    public class LaMPGroupTypeHandler:HandlerBase
    {
       #region Routed Methods

        #region GetMethods
        [RequiresAuthentication]
        [HttpOperation(HttpMethod.GET)]
        public OperationResult Get()
        {
            List<LAMP_GROUP_TYPE> laMPGroupTypes;

            //Get basic authentication password
            using (EasySecureString securedPassword = GetSecuredPassword())
            {
                using (LaMPDSEntities aLaMPRDS = GetRDS(securedPassword))
                {

                    laMPGroupTypes = aLaMPRDS.LAMP_GROUP_TYPE.OrderBy(lg => lg.LAMP_GROUP_TYPE_ID).ToList();

                }//end using
            }//end using

            return new OperationResult.OK { ResponseResource = laMPGroupTypes };
        }//end httpMethod get

        [RequiresAuthentication]
        [HttpOperation(HttpMethod.GET)]
        public OperationResult Get(Int32 laMPGroupTypeID)
        {
            LAMP_GROUP_TYPE aLaMPGroupType;

            //return BadRequest if ther is no ID
            if (laMPGroupTypeID <= 0)
            {
                return new OperationResult.BadRequest();
            }

            //Get basic authentication password
            using (EasySecureString securedPassword = GetSecuredPassword())
            {
                using (LaMPDSEntities aLaMPRDS = GetRDS(securedPassword))
                {

                    aLaMPGroupType = aLaMPRDS.LAMP_GROUP_TYPE.Single(lg => lg.LAMP_GROUP_TYPE_ID == laMPGroupTypeID);


                }//end using
            }//end using

            return new OperationResult.OK { ResponseResource = aLaMPGroupType };
        }//end httpMethod get

        #endregion

        #region PostMethods
        /// 
        /// Force the user to provide authentication 
        /// 
        [RequiresAuthentication]
        [HttpOperation(HttpMethod.POST, ForUriName = "CreateLaMPGroupType")]
        public OperationResult Post(LAMP_GROUP_TYPE aLaMPGroupType)
        {
            //Return BadRequest if missing required fields
            if (String.IsNullOrEmpty(aLaMPGroupType.LAMP_GROUP))
            {
                return new OperationResult.BadRequest();
            }

            //Get basic authentication password
            using (EasySecureString securedPassword = GetSecuredPassword())
            {
                using (LaMPDSEntities aLaMPRDS = GetRDS(securedPassword))
                {
                    decimal nextKey = 1;
                    if (aLaMPRDS.LAMP_GROUP_TYPE.Count() > 0)
                    {
                        nextKey = aLaMPRDS.LAMP_GROUP_TYPE.OrderByDescending(l => l.LAMP_GROUP_TYPE_ID).First().LAMP_GROUP_TYPE_ID + 1;
                    }

                    //set ID
                    aLaMPGroupType.LAMP_GROUP_TYPE_ID = nextKey;

                    aLaMPRDS.LAMP_GROUP_TYPE.AddObject(aLaMPGroupType);

                    aLaMPRDS.SaveChanges();
                }// end using

            }// end using

            //Return object to verify persisitance
            return new OperationResult.OK { ResponseResource = aLaMPGroupType };
        }//end Post

        [RequiresAuthentication]
        [HttpOperation(HttpMethod.POST, ForUriName = "CreateLaMPGroupTypeList")]
        public OperationResult Post(List<LAMP_GROUP_TYPE> LaMPGroupTypes)
        {
            //Return BadRequest if missing required fields
            if (LaMPGroupTypes.Count <= 0)
            {
                return new OperationResult.BadRequest();
            }

            //Get basic authentication password
            using (EasySecureString securedPassword = GetSecuredPassword())
            {
                using (LaMPDSEntities aLaMPRDS = GetRDS(securedPassword))
                {
                    decimal nextKey = 1;
                    if (aLaMPRDS.LAMP_GROUP_TYPE.Count() > 0)
                    {
                        nextKey = aLaMPRDS.LAMP_GROUP_TYPE.OrderByDescending(l => l.LAMP_GROUP_TYPE_ID).First().LAMP_GROUP_TYPE_ID + 1;
                    }
                                    
                    foreach (LAMP_GROUP_TYPE item in LaMPGroupTypes)
                    {
                        //update database ID
                        item.LAMP_GROUP_TYPE_ID = nextKey;

                        aLaMPRDS.LAMP_GROUP_TYPE.AddObject(item);
                        nextKey += 1;

                    }//next item

                    aLaMPRDS.SaveChanges();
                }// end using

            }// end using

            //Return object to verify persisitance
            return new OperationResult.OK { ResponseResource = LaMPGroupTypes };
        }
        #endregion

        #region PutMethods

        [RequiresAuthentication]
        [HttpOperation(HttpMethod.PUT, ForUriName = "UpdateLaMPGroupType")]
        public OperationResult Post(Int32 laMPGroupTypeId, LAMP_GROUP_TYPE instance)
        {
            //Return BadRequest if missing required fields
            if ((laMPGroupTypeId <= 0))
            {
                return new OperationResult.BadRequest();
            }


            //Get basic authentication password
            using (EasySecureString securedPassword = GetSecuredPassword())
            {
                using (LaMPDSEntities aLaMPRDS = GetRDS(securedPassword))
                {
                    //fetch the object to be updated (assuming that it exists)
                    LAMP_GROUP_TYPE ObjectToBeUpdated = aLaMPRDS.LAMP_GROUP_TYPE.Single(lg => lg.LAMP_GROUP_TYPE_ID == laMPGroupTypeId);

                    //LaMPGroup
                    ObjectToBeUpdated.LAMP_GROUP = (string.IsNullOrEmpty(instance.LAMP_GROUP) ?
                        ObjectToBeUpdated.LAMP_GROUP : instance.LAMP_GROUP);

                    aLaMPRDS.SaveChanges();
                }// end using

            }// end using

            //Return object to verify persisitance
            return new OperationResult.OK { ResponseResource = instance };
        }


        #endregion

        #region DeleteMethods

        [RequiresAuthentication]
        [HttpOperation(HttpMethod.DELETE, ForUriName = "DeleteLaMPGroupType")]
        public OperationResult Post(Int32 laMPGroupTypeId)
        {
            //Return BadRequest if missing required fields
            if (laMPGroupTypeId <= 0)
            {return new OperationResult.BadRequest();}


            //Get basic authentication password
            using (EasySecureString securedPassword = GetSecuredPassword())
            {
                using (LaMPDSEntities aLaMPRDS = GetRDS(securedPassword))
                {
                    //fetch the object to be updated (assuming that it exists)
                    LAMP_GROUP_TYPE ObjectToBeDeleted = aLaMPRDS.LAMP_GROUP_TYPE.Single(lg =>lg.LAMP_GROUP_TYPE_ID == laMPGroupTypeId);

                    //delete it
                    aLaMPRDS.LAMP_GROUP_TYPE.DeleteObject(ObjectToBeDeleted);
                    aLaMPRDS.SaveChanges();
 
                }// end using
            }// end using

            //Return object to verify persisitance
            return new OperationResult.OK { };
        }

        #endregion

        #endregion

    }//end MediaTypeHandler
}//end namespace