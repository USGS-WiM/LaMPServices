
using System;
using System.Collections.Generic;
using System.Data.Objects.DataClasses;
using System.Linq;
using System.Web;
using System.Web.Mvc;
using System.Text.RegularExpressions;

using LaMPWeb.Utilities;
using RestSharp;

using LaMPServices;
using LaMPServices.Resources;
using LaMPWeb.Models;

namespace LaMPWeb.Controllers
{
    [Authorize]
    public class SiteController : Controller
    {
        //
        // GET: /Site/

        //get list of sites to show in infobox
        public PartialViewResult SiteInfoBox(int id)
        {
            LaMPServiceCaller serviceCaller = LaMPServiceCaller.Instance;

            List<CATALOG_> CatList = GetProjectCatalogs(id);

            List<Site> SiteList = new List<Site>();
            foreach (CATALOG_ c in CatList)
            {
                Site thisSite = new Site();
                thisSite.CatalogId = c.CATALOG_ID;
                thisSite.ProjectId = id;
                thisSite.LocationId = c.LOCATION_ID;
                //get the location
                thisSite.LocationName = GetALocation(c.LOCATION_ID).NAME;
                SiteList.Add(thisSite);
            }

            ViewData["SiteList"] = SiteList;
            ViewData["SiteCount"] = SiteList.Count();
            ViewData["project"] = GetThisProject(id);
            return PartialView();
        }
        
        //GET: popup partial view containing parameter checkboxes
        public ActionResult AddParameters(string paramS)
        {
            LaMPServiceCaller serviceCaller = LaMPServiceCaller.Instance;
            var request = new RestRequest();
            request.Resource = "/parameters";
            request.RootElement = "ArrayOfPARAMETER_TYPE";
            List<PARAMETER_TYPE> Parameters = serviceCaller.Execute<List<PARAMETER_TYPE>>(request);
            ViewData["Chemical"] = Parameters.Where(p => p.PARAMETER_GROUP == "CHEMICAL").OrderBy(po => po.PARAMETER_TYPE_ID).ToList();
            ViewData["Physical"] = Parameters.Where(p => p.PARAMETER_GROUP == "PHYSICAL").OrderBy(po => po.PARAMETER_TYPE_ID).ToList();
            ViewData["Biological"] = Parameters.Where(p => p.PARAMETER_GROUP == "BIOLOGICAL").OrderBy(po => po.PARAMETER_TYPE_ID).ToList();
            ViewData["Microbiological"] = Parameters.Where(p => p.PARAMETER_GROUP == "MICROBIOLOGICAL").OrderBy(po => po.PARAMETER_TYPE_ID).ToList();
            ViewData["Toxicological"] = Parameters.Where(p => p.PARAMETER_GROUP == "TOXICOLOGICAL").OrderBy(po => po.PARAMETER_TYPE_ID).ToList();

            //parse the params to a List and send to the popup so can pre-check boxes of those selected
            if (paramS != null)
            {
                string[] pars = Regex.Split(paramS, ",");
                List<int> siteParamsList = new List<int>();
                foreach (string p in pars)
                {
                    if (!string.IsNullOrWhiteSpace(p))
                    {
                        siteParamsList.Add(Convert.ToInt32(p));
                    }
                }
                ViewData["siteParams"] = siteParamsList;
            }
            return PartialView();
        }
        
        //POST: SiteParameter popup post
        [HttpPost]
        public JsonResult AddSiteParameters(FormCollection fc)
        {
            List<string> paramIDs = new List<string>();
            foreach (var key in fc.AllKeys)
            {
                if (key != "X-Requested-With")
                {
                    paramIDs.Add(key);
                }
            }

            return Json(JsonResponseFactory.SuccessResponse(paramIDs), JsonRequestBehavior.DenyGet);
        }

        //GET: SiteCreate page, manually 1 by 1 entry form
        public ActionResult SiteCreate1(int id, string From)
        {
            ViewData["project"] = GetThisProject(id);
            //get any sites that may already exist for this project
            LaMPServiceCaller serviceCaller = LaMPServiceCaller.Instance;
            var request = new RestRequest();

            List<CATALOG_> projCatalogs = GetProjectCatalogs(id);

            //Model for Sites. need catalog info and location info
            List<Site> ProjSites = new List<Site>();

            if (projCatalogs.Count >= 1)
            {
                foreach (CATALOG_ c in projCatalogs)
                {
                    Site thisSite = new Site();
                    thisSite.CatalogId = c.CATALOG_ID;
                    thisSite.LocationId = c.LOCATION_ID;
                    thisSite.LocationName = GetALocation(c.LOCATION_ID).NAME;
                    thisSite.ProjectId = c.PROJECT_ID;
                    ProjSites.Add(thisSite);
                }
                ViewData["sites"] = ProjSites;
            }
            ViewData["states"] = GetStates();
            ViewData["countries"] = GetCountries();
            ViewData["Lakes"] = GetLakes();
            ViewData["statusTypes"] = GetStatusTypes();
            ViewData["resourceTypes"] = GetResources();
            ViewData["mediaTypes"] = GetMedia();
            ViewData["frequencyTypes"] = GetSampleFreq();

            if (From == "Publications")
            {
                ViewData["From"] = From;
            }
            return View();
        }

        //GET: copy/paste data grid view opttion
        public ActionResult SiteCreate2()
        {
            ViewData["Lakes"] = GetLakes();
            ViewData["Resources"] = GetResources();
            ViewData["Media"] = GetMedia();
            ViewData["SampleFreq"] = GetSampleFreq();

            return View();
        }

        //going from input site to grid copy/paste site..grab site that was entered and put it in grid
        public ActionResult Post4Grid(string SiteName, string SiteLat, string SiteLong, string SiteDesc, string Lakedropdown, 
            string Waterdropdown, string newWaterbody, string wbInput, string startDate, string endDate, string Resourcedropdown, string mediadropdown, string sfdropdown,
            string samplePlatform, string parameters, string siteUrl, string additionalInfo, string OtherSite)
        {
            
            List<string> aSite = new List<string>();
            if (SiteName != null && SiteName != "")
            {                
                aSite.Add(SiteName);
                aSite.Add(SiteLat);
                aSite.Add(SiteLong);
                aSite.Add(SiteDesc);
                aSite.Add(Lakedropdown);
                aSite.Add(Waterdropdown);
                aSite.Add(newWaterbody);
                aSite.Add(wbInput);
                aSite.Add(startDate);
                aSite.Add(endDate);
                aSite.Add(Resourcedropdown);
                aSite.Add(mediadropdown);
                aSite.Add(sfdropdown);
                aSite.Add(samplePlatform);
                aSite.Add(parameters);
                aSite.Add(siteUrl);
                aSite.Add(additionalInfo);
                aSite.Add(OtherSite);

                ViewData["aSite"] = aSite;
            }
                return View("SiteCreate2");
        }

        
        //POST: Post the site
        [HttpPost]
        public ActionResult SiteCreate(SiteModel aSite, string Create)
        {
            try
            {
                string From = aSite.From;

                LOCATION aLocation = aSite.Location;
                //ensure longitude is negative
                decimal l;
                if (aLocation.LONGITUDE > 0)
                {
                    l = decimal.Negate(Convert.ToDecimal(aLocation.LONGITUDE));
                    aLocation.LONGITUDE = l;
                }

                //POST aLocation post the alocation, get the alocationID add it to catalog.locationId then post the catalog
                LaMPServiceCaller serviceCaller = LaMPServiceCaller.Instance;
                var request = new RestRequest(Method.POST);
                request.Resource = "/sites";
                request.RequestFormat = DataFormat.Xml;
                request.XmlSerializer = new RestSharp.Serializers.DotNetXmlSerializer();
                request.AddBody(aLocation);
                LOCATION postedSite = serviceCaller.Execute<LOCATION>(request);

                //post acatalog
                CATALOG_ aCatalog = aSite.Catalog;
                aCatalog.LOCATION_ID = postedSite.LOCATION_ID;

                request = new RestRequest(Method.POST);
                request.Resource = "/catalogs";
                request.RequestFormat = DataFormat.Xml;
                request.XmlSerializer = new RestSharp.Serializers.DotNetXmlSerializer();
                request.AddBody(aCatalog);
                CATALOG_ postedCatalog = serviceCaller.Execute<CATALOG_>(request);

                //ResourceTYpes
                string resources = aSite.ResourceTypes; //multiple select
                if (resources != "" && resources != null)
                {
                    List<RESOURCE_TYPE> siteResources = new List<RESOURCE_TYPE>();
                    //parse and post
                    string[] res = Regex.Split(resources, ",");
                    foreach (string r in res)
                    {
                        if (!string.IsNullOrWhiteSpace(r))
                        {
                            //get it
                            RESOURCE_TYPE thisResource = GetAResourceType(Convert.ToDecimal(r));

                            if (thisResource != null)
                            {
                                //now post it
                                request = new RestRequest(Method.POST);
                                request.Resource = "/catalogs/{catalogId}/addResourcetype";
                                request.AddParameter("catalogId", postedCatalog.CATALOG_ID, ParameterType.UrlSegment);
                                request.RequestFormat = DataFormat.Xml;
                                request.XmlSerializer = new RestSharp.Serializers.DotNetXmlSerializer();
                                request.AddBody(thisResource);
                                siteResources = serviceCaller.Execute<List<RESOURCE_TYPE>>(request);
                            }
                        }
                    }
                }

                string medias = aSite.MediaTypes;
                if (medias != "" && medias != null)
                {
                    List<MEDIA_TYPE> siteMedia = new List<MEDIA_TYPE>();
                    //parse and post
                    string[] med = Regex.Split(medias, ",");
                    foreach (string m in med)
                    {
                        if (!string.IsNullOrWhiteSpace(m))
                        {
                            //get it
                            MEDIA_TYPE thisMedia = GetAMedia(Convert.ToDecimal(m));

                            if (thisMedia != null)
                            {
                                //now post it   
                                request = new RestRequest(Method.POST);
                                request.Resource = "/catalogs/{catalogId}/addMedium";
                                request.AddParameter("catalogId", postedCatalog.CATALOG_ID, ParameterType.UrlSegment);
                                request.RequestFormat = DataFormat.Xml;
                                request.XmlSerializer = new RestSharp.Serializers.DotNetXmlSerializer();
                                request.AddBody(thisMedia);
                                siteMedia = serviceCaller.Execute<List<MEDIA_TYPE>>(request);
                            }
                        }
                    }
                }

                string freq = aSite.FrequencyTypes;
                if (freq != "" && freq != null)
                {
                    List<FREQUENCY_TYPE> siteFreq = new List<FREQUENCY_TYPE>();
                    //parse and post
                    string[] fre = Regex.Split(freq, ",");
                    foreach (string f in fre)
                    {
                        if (!string.IsNullOrWhiteSpace(f))
                        {
                            //get it
                            FREQUENCY_TYPE thisFrequency = GetAFrequency(Convert.ToDecimal(f));

                            if (thisFrequency != null)
                            {
                                //now post it 
                                request = new RestRequest(Method.POST);
                                request.Resource = "/catalogs/{catalogId}/addFrequency";
                                request.AddParameter("catalogId", postedCatalog.CATALOG_ID, ParameterType.UrlSegment);
                                request.RequestFormat = DataFormat.Xml;
                                request.XmlSerializer = new RestSharp.Serializers.DotNetXmlSerializer();
                                request.AddBody(thisFrequency);
                                siteFreq = serviceCaller.Execute<List<FREQUENCY_TYPE>>(request);
                            }
                        }
                    }
                }

                string parameters = aSite.SiteParameters;
                if (!string.IsNullOrWhiteSpace(parameters))
                {
                    List<PARAMETER_TYPE> siteParameters = new List<PARAMETER_TYPE>();
                    //parse and post
                    string[] param = Regex.Split(parameters, ",");
                    foreach (string p in param)
                    {
                        if (!string.IsNullOrWhiteSpace(p))
                        {
                            //get it
                            PARAMETER_TYPE thisParam = GetAParameter(Convert.ToDecimal(p));

                            if (thisParam != null)
                            {
                                //now post it      
                                request = new RestRequest(Method.POST);
                                request.Resource = "/catalogs/{catalogId}/addParameter";
                                request.AddParameter("catalogId", postedCatalog.CATALOG_ID, ParameterType.UrlSegment);
                                request.RequestFormat = DataFormat.Xml;
                                request.XmlSerializer = new RestSharp.Serializers.DotNetXmlSerializer();
                                request.AddBody(thisParam);
                                siteParameters = serviceCaller.Execute<List<PARAMETER_TYPE>>(request);
                            }
                        }
                    }
                }
                if (Create == "Save & Add\r\n Another Site")
                {
                    return RedirectToAction("SiteCreate1", new { id = postedCatalog.PROJECT_ID, From = From });
                }
                else if (Create == "Save & Go To\r\n Project Details")
                {
                    return RedirectToAction("ProjectDetails", "Project", new { id = postedCatalog.PROJECT_ID });
                }
                else
                {
                    return RedirectToAction("Finish", "Home");
                }
            }
            catch (Exception e)
            {
                return View(e.ToString());
            }
        }        

        //GET: details page for a Site/Location (Catalog)
        public ActionResult SiteDetails(int id, int projId)
        {
            //get this project
            ViewData["Project"] = GetThisProject(projId);
            
            LaMPServiceCaller serviceCaller = LaMPServiceCaller.Instance;
            var request = new RestRequest();
            request.Resource = "/catalogs/{catalogId}";
            request.RootElement = "CATALOG_";
            request.AddParameter("catalogId", id, ParameterType.UrlSegment);
            CATALOG_ thisCat = serviceCaller.Execute<CATALOG_>(request);
            
            //get the Location
            request = new RestRequest();
            request.Resource = "/catalogs/{catalogId}/site";
            request.RootElement = "LOCATION";
            request.AddParameter("catalogId", thisCat.CATALOG_ID, ParameterType.UrlSegment);
            LOCATION thisLocation = serviceCaller.Execute<LOCATION>(request);
                        
            if (thisLocation != null)
            {
                //make sure longitude is negative (need to store it first because of decimal? format)
                decimal longi = Convert.ToDecimal(thisLocation.LONGITUDE);
                if (longi > 0)
                {
                    longi = decimal.Negate(longi);
                    thisLocation.LONGITUDE = longi;
                }
                ViewData["Location"] = thisLocation;
                
                if (thisLocation.LAKE_TYPE_ID != null && thisLocation.LAKE_TYPE_ID != 0)
                {
                    request = new RestRequest();
                    request.Resource = "/lakes/{lakeId}";
                    request.RootElement = "LAKE_TYPE";
                    request.AddParameter("lakeId", thisLocation.LAKE_TYPE_ID, ParameterType.UrlSegment);
                    ViewData["LakeType"] = serviceCaller.Execute<LAKE_TYPE>(request).LAKE;
                }
                if (thisLocation.STATUS_TYPE_ID != null && thisLocation.STATUS_TYPE_ID != 0)
                {
                    request = new RestRequest();
                    request.Resource = "/status/{statusId}";
                    request.RootElement = "STATUS_TYPE";
                    request.AddParameter("statusId", thisLocation.STATUS_TYPE_ID, ParameterType.UrlSegment);
                    ViewData["StatusType"] = serviceCaller.Execute<STATUS_TYPE>(request).STATUS;
                }
            }

            request = new RestRequest();
            request.Resource = "/catalogs/{catalogId}/resourcetypes";
            request.RootElement = "ArrayOfResource_type";
            request.AddParameter("catalogId", thisCat.CATALOG_ID, ParameterType.UrlSegment);
            ViewData["ResourceList"] = serviceCaller.Execute<List<RESOURCE_TYPE>>(request);

            request = new RestRequest();
            request.Resource = "/catalogs/{catalogId}/media";
            request.RootElement = "ArrayOfMedia_type";
            request.AddParameter("catalogId", thisCat.CATALOG_ID, ParameterType.UrlSegment);
            ViewData["MediaList"] = serviceCaller.Execute<List<MEDIA_TYPE>>(request);

            request = new RestRequest();
            request.Resource = "/catalogs/{catalogId}/frequencies";
            request.RootElement = "ArrayOfFrequency_type";
            request.AddParameter("catalogId", thisCat.CATALOG_ID, ParameterType.UrlSegment);
            ViewData["FrequencyList"] = serviceCaller.Execute<List<FREQUENCY_TYPE>>(request);

            request = new RestRequest();
            request.Resource = "/catalogs/{catalogId}/parameters";
            request.RootElement = "ArrayOfParameter_type";
            request.AddParameter("catalogId", thisCat.CATALOG_ID, ParameterType.UrlSegment);
            List<PARAMETER_TYPE> parameters = serviceCaller.Execute<List<PARAMETER_TYPE>>(request);

            if (parameters.Count >= 1)
            {
                ViewData["ChemicalP"] = parameters.Where(p => p.PARAMETER_GROUP == "CHEMICAL").OrderBy(po => po.PARAMETER_TYPE_ID).ToList();
                ViewData["PhysicalP"] = parameters.Where(p => p.PARAMETER_GROUP == "PHYSICAL").OrderBy(po => po.PARAMETER_TYPE_ID).ToList();
                ViewData["BiologicalP"] = parameters.Where(p => p.PARAMETER_GROUP == "BIOLOGICAL").OrderBy(po => po.PARAMETER_TYPE_ID).ToList();
                ViewData["MicrobiolP"] = parameters.Where(p => p.PARAMETER_GROUP == "MICROBIOLOGICAL").OrderBy(po => po.PARAMETER_TYPE_ID).ToList();
                ViewData["ToxicologicalP"] = parameters.Where(p => p.PARAMETER_GROUP == "TOXICOLOGICAL").OrderBy(po => po.PARAMETER_TYPE_ID).ToList();
            }

            return View(thisCat);            
        }

        //GET: details page for a Site/Location (Catalog)
        public ActionResult SiteEdit1(int id, int projId)
        {
            SiteModel thisSite = new SiteModel();

            //pass this project
            thisSite.Project = GetThisProject(projId);

            LaMPServiceCaller serviceCaller = LaMPServiceCaller.Instance;
            var request = new RestRequest();
            request.Resource = "/catalogs/{catalogId}";
            request.RootElement = "CATALOG_";
            request.AddParameter("catalogId", id, ParameterType.UrlSegment);
            CATALOG_ thisCat = serviceCaller.Execute<CATALOG_>(request);
            thisSite.Catalog = thisCat;

            //get the Location
            request = new RestRequest();
            request.Resource = "/catalogs/{catalogId}/site";
            request.RootElement = "LOCATION";
            request.AddParameter("catalogId", thisCat.CATALOG_ID, ParameterType.UrlSegment);
            LOCATION thisLocation = serviceCaller.Execute<LOCATION>(request);

            if (thisLocation != null)
            {
                //make sure longitude is negative (need to store it first because of decimal? format)
                decimal longi = Convert.ToDecimal(thisLocation.LONGITUDE);
                if (longi > 0)
                {
                    longi = decimal.Negate(longi);
                    thisLocation.LONGITUDE = longi;
                }

                thisSite.Location = thisLocation;

                if (thisLocation.LAKE_TYPE_ID != null && thisLocation.LAKE_TYPE_ID != 0)
                {
                    request = new RestRequest();
                    request.Resource = "/lakes/{lakeId}";
                    request.RootElement = "LAKE_TYPE";
                    request.AddParameter("lakeId", thisLocation.LAKE_TYPE_ID, ParameterType.UrlSegment);
                    ViewData["LakeType"] = serviceCaller.Execute<LAKE_TYPE>(request).LAKE;
                }
                if (thisLocation.STATUS_TYPE_ID != null && thisLocation.STATUS_TYPE_ID != 0)
                {
                    request = new RestRequest();
                    request.Resource = "/status/{statusId}";
                    request.RootElement = "STATUS_TYPE";
                    request.AddParameter("statusId", thisLocation.STATUS_TYPE_ID, ParameterType.UrlSegment);
                    ViewData["StatusType"] = serviceCaller.Execute<STATUS_TYPE>(request).STATUS;
                }
            }

            //get all drop down values
            ViewData["states"] = GetStates();
            ViewData["countries"] = GetCountries();
            ViewData["Lakes"] = GetLakes();
            ViewData["statusTypes"] = GetStatusTypes();
            ViewData["resourceTypes"] = GetResources();
            ViewData["mediaTypes"] = GetMedia();
            ViewData["frequencyTypes"] = GetSampleFreq();

            //get the site's resource types
            request = new RestRequest();
            request.Resource = "/catalogs/{catalogId}/resourcetypes";
            request.RootElement = "ArrayOfResource_type";
            request.AddParameter("catalogId", thisCat.CATALOG_ID, ParameterType.UrlSegment);
            List<RESOURCE_TYPE> SiteResources = serviceCaller.Execute<List<RESOURCE_TYPE>>(request);
            ViewData["SiteResources"] = SiteResources;
            
            //add to comma separated string to populate hidden input
            string siteRes = string.Empty;
            string trimmedResources = string.Empty;
            if (SiteResources.Count >= 1)
            {
                foreach (RESOURCE_TYPE rt in SiteResources)
                {
                    siteRes += rt.RESOURCE_TYPE_ID + ",";
                }
                trimmedResources = siteRes.TrimEnd(',', ' ');
            }
            thisSite.ResourceTypes = trimmedResources;

            //get this site's Media
            request = new RestRequest();
            request.Resource = "/catalogs/{catalogId}/media";
            request.RootElement = "ArrayOfMedia_type";
            request.AddParameter("catalogId", thisCat.CATALOG_ID, ParameterType.UrlSegment);
            List<MEDIA_TYPE> SiteMedia = serviceCaller.Execute<List<MEDIA_TYPE>>(request);
            ViewData["MediaList"] = SiteMedia;

            //add to comma separated string to populate hidden input
            string siteMedia = string.Empty;
            string trimmedMedia = string.Empty;
            if (SiteMedia.Count >= 1)
            {
                foreach (MEDIA_TYPE mt in SiteMedia)
                {
                    siteMedia += mt.MEDIA_TYPE_ID + ",";
                }
                trimmedMedia = siteMedia.TrimEnd(',', ' ');
            }
            thisSite.MediaTypes = trimmedMedia;

            //get this site's Frequencies
            request = new RestRequest();
            request.Resource = "/catalogs/{catalogId}/frequencies";
            request.RootElement = "ArrayOfFrequency_type";
            request.AddParameter("catalogId", thisCat.CATALOG_ID, ParameterType.UrlSegment);
            List<FREQUENCY_TYPE> SiteFrequency = serviceCaller.Execute<List<FREQUENCY_TYPE>>(request);
            ViewData["FrequencyList"] = SiteFrequency;

            //add to comma separated string to populate hidden input
            string siteFreq = string.Empty;
            string trimmedFreq = string.Empty;
            if (SiteFrequency.Count >= 1)
            {
                foreach (FREQUENCY_TYPE ft in SiteFrequency)
                {
                    siteFreq += ft.FREQUENCY_TYPE_ID + ",";
                }
                trimmedFreq = siteFreq.TrimEnd(',', ' ');
            }
            thisSite.FrequencyTypes = trimmedFreq;

            //get this site's parameters
            request = new RestRequest();
            request.Resource = "/catalogs/{catalogId}/parameters";
            request.RootElement = "ArrayOfParameter_type";
            request.AddParameter("catalogId", thisCat.CATALOG_ID, ParameterType.UrlSegment);
            List<PARAMETER_TYPE> parameters = serviceCaller.Execute<List<PARAMETER_TYPE>>(request);
            string siteParams = string.Empty;
            string trimmedSiteParams = string.Empty;

            if (parameters.Count >= 1)
            {
                foreach (PARAMETER_TYPE pt in parameters)
                {
                    siteParams += pt.PARAMETER_TYPE_ID + ",";
                }
                trimmedSiteParams = siteParams.TrimEnd(',', ' ');

                thisSite.SiteParameters = trimmedSiteParams;

                ViewData["ChemicalP"] = parameters.Where(p => p.PARAMETER_GROUP == "CHEMICAL").OrderBy(po => po.PARAMETER_TYPE_ID).ToList();
                ViewData["PhysicalP"] = parameters.Where(p => p.PARAMETER_GROUP == "PHYSICAL").OrderBy(po => po.PARAMETER_TYPE_ID).ToList();
                ViewData["BiologicalP"] = parameters.Where(p => p.PARAMETER_GROUP == "BIOLOGICAL").OrderBy(po => po.PARAMETER_TYPE_ID).ToList();
                ViewData["MicrobiolP"] = parameters.Where(p => p.PARAMETER_GROUP == "MICROBIOLOGICAL").OrderBy(po => po.PARAMETER_TYPE_ID).ToList();
                ViewData["ToxicologicalP"] = parameters.Where(p => p.PARAMETER_GROUP == "TOXICOLOGICAL").OrderBy(po => po.PARAMETER_TYPE_ID).ToList();
            }


            return View(thisSite);
        }

        //POST: Post the site
        [HttpPost]
        public ActionResult SiteEdit1(SiteModel editedSite, int id)
        {
            try
            {
                CATALOG_ aCatalog = editedSite.Catalog;
                LOCATION aLocation = editedSite.Location;
                //ensure longitude is negative
                decimal l;
                if (aLocation.LONGITUDE > 0)
                {
                    l = decimal.Negate(Convert.ToDecimal(aLocation.LONGITUDE));
                    aLocation.LONGITUDE = l;
                }

                //PUT aLocation post the alocation
                LaMPServiceCaller serviceCaller = LaMPServiceCaller.Instance;
                var request = new RestRequest(Method.POST);
                request.Resource = "/sites/{siteId}";
                request.RequestFormat = DataFormat.Xml;
                request.AddParameter("siteId", aLocation.LOCATION_ID, ParameterType.UrlSegment);
                request.AddHeader("X-HTTP-Method-Override", "PUT");
                request.AddHeader("Content-Type", "application/xml");
                request.XmlSerializer = new RestSharp.Serializers.DotNetXmlSerializer();
                request.AddBody(aLocation);
                LOCATION UpdatedSite = serviceCaller.Execute<LOCATION>(request);

                //PUT acatalog

                request = new RestRequest(Method.POST);
                request.Resource = "/catalogs/{catalogId}";
                request.RequestFormat = DataFormat.Xml;
                request.AddParameter("catalogId", aCatalog.CATALOG_ID, ParameterType.UrlSegment);
                request.AddHeader("X-HTTP-Method-Override", "PUT");
                request.AddHeader("Content-Type", "application/xml");
                request.XmlSerializer = new RestSharp.Serializers.DotNetXmlSerializer();
                request.AddBody(aCatalog);
                CATALOG_ postedCatalog = serviceCaller.Execute<CATALOG_>(request);

                //ResourceTYpes - remove those from "ResourcesToRemove, then add all those in "ResourceTypes"
                //remove first
                if (!string.IsNullOrWhiteSpace(editedSite.ResourcesToRemove))
                {
                    //parse
                    string[] RemoveRes = Regex.Split(editedSite.ResourcesToRemove, ",").ToArray();
                    foreach (string rr in RemoveRes)
                    {
                        if (!string.IsNullOrWhiteSpace(rr))
                        {
                            RESOURCE_TYPE thisRR = GetAResourceType(Convert.ToDecimal(rr));

                            if (thisRR != null)
                            {
                                //now remove it from the site
                                request = new RestRequest(Method.POST);
                                request.Resource = "/catalogs/{catalogId}/removeResourcetype";
                                request.AddParameter("catalogId", aCatalog.CATALOG_ID, ParameterType.UrlSegment);
                                request.AddHeader("X-HTTP-Method-Override", "DELETE");
                                request.AddHeader("Content-Type", "application/xml");
                                request.XmlSerializer = new RestSharp.Serializers.DotNetXmlSerializer();
                                request.AddBody(thisRR);
                                serviceCaller.Execute<RESOURCE_TYPE>(request);
                            }
                        }
                    }
                }

                //now make sure all those in the "ResourceTypes" are attachd to the site
                List<RESOURCE_TYPE> siteResources = new List<RESOURCE_TYPE>();
                if (!string.IsNullOrWhiteSpace(editedSite.ResourceTypes))
                {
                    //parse
                    string[] res = Regex.Split(editedSite.ResourceTypes, ",").ToArray();
                    foreach (string r in res)
                    {
                        if (!string.IsNullOrWhiteSpace(r))
                        {
                            RESOURCE_TYPE thisResType = GetAResourceType(Convert.ToDecimal(r));

                            if (thisResType != null)
                            {
                                request = new RestRequest(Method.POST);
                                request.Resource = "/catalogs/{catalogId}/addResourcetype";
                                request.AddParameter("catalogId", aCatalog.CATALOG_ID, ParameterType.UrlSegment);
                                request.RequestFormat = DataFormat.Xml;
                                request.XmlSerializer = new RestSharp.Serializers.DotNetXmlSerializer();
                                request.AddBody(thisResType);
                                siteResources = serviceCaller.Execute<List<RESOURCE_TYPE>>(request);
                            }
                        }
                    }
                }
                
                //Media
                //remove first
                if (!string.IsNullOrWhiteSpace(editedSite.MediaToRemove))
                {
                    //parse
                    string[] RemoveMed = Regex.Split(editedSite.MediaToRemove, ",").ToArray();
                    foreach (string rm in RemoveMed)
                    {
                        if (!string.IsNullOrWhiteSpace(rm))
                        {
                            MEDIA_TYPE thisRM = GetAMedia(Convert.ToDecimal(rm));

                            if (thisRM != null)
                            {
                                //now remove it from the site
                                request = new RestRequest(Method.POST);
                                request.Resource = "/catalogs/{catalogId}/removeMedium";
                                request.AddParameter("catalogId", aCatalog.CATALOG_ID, ParameterType.UrlSegment);
                                request.AddHeader("X-HTTP-Method-Override", "DELETE");
                                request.AddHeader("Content-Type", "application/xml");
                                request.XmlSerializer = new RestSharp.Serializers.DotNetXmlSerializer();
                                request.AddBody(thisRM);
                                serviceCaller.Execute<MEDIA_TYPE>(request);
                            }
                        }
                    }
                }
                
                //now add
                List<MEDIA_TYPE> siteMedia = new List<MEDIA_TYPE>();
                if (!string.IsNullOrWhiteSpace(editedSite.MediaTypes))
                {
                    //parse
                    string[] med = Regex.Split(editedSite.MediaTypes, ",");
                    foreach (string m in med)
                    {
                        if (!string.IsNullOrWhiteSpace(m))
                        {
                            //get it
                            MEDIA_TYPE thisMedia = GetAMedia(Convert.ToDecimal(m)); 

                            if (thisMedia != null)
                            {
                                //now post it   
                                request = new RestRequest(Method.POST);
                                request.Resource = "/catalogs/{catalogId}/addMedium";
                                request.AddParameter("catalogId", aCatalog.CATALOG_ID, ParameterType.UrlSegment);
                                request.RequestFormat = DataFormat.Xml;
                                request.XmlSerializer = new RestSharp.Serializers.DotNetXmlSerializer();
                                request.AddBody(thisMedia);
                                siteMedia = serviceCaller.Execute<List<MEDIA_TYPE>>(request);
                            }
                        }
                    }
                }

                //FREQUENCY_TYPE
                //remove first
                if (!string.IsNullOrWhiteSpace(editedSite.FrequencyToRemove))
                {
                    //parse
                    string[] RemoveFreq = Regex.Split(editedSite.FrequencyToRemove, ",").ToArray();
                    foreach (string rfreq in RemoveFreq)
                    {
                        if (!string.IsNullOrWhiteSpace(rfreq))
                        {
                            FREQUENCY_TYPE thisFreq = GetAFrequency(Convert.ToDecimal(rfreq));
                            
                            if (thisFreq != null)
                            {
                                //now remove it
                                request = new RestRequest(Method.POST);
                                request.Resource = "/catalogs/{catalogId}/removeFrequency";
                                request.AddParameter("catalogId", aCatalog.CATALOG_ID, ParameterType.UrlSegment);
                                request.AddHeader("X-HTTP-Method-Override", "DELETE");
                                request.AddHeader("Content-Type", "application/xml");
                                request.XmlSerializer = new RestSharp.Serializers.DotNetXmlSerializer();
                                request.AddBody(thisFreq);
                                serviceCaller.Execute<FREQUENCY_TYPE>(request);
                            }
                        }
                    }
                }
                
                //now post freq to site
                List<FREQUENCY_TYPE> siteFreqs = new List<FREQUENCY_TYPE>();
                //parse
                if (!string.IsNullOrWhiteSpace(editedSite.FrequencyTypes))
                {
                    string[] fre = Regex.Split(editedSite.FrequencyTypes, ",");
                    foreach (string fr in fre)
                    {
                        if (!string.IsNullOrWhiteSpace(fr))
                        {
                            FREQUENCY_TYPE thisFreq = GetAFrequency(Convert.ToDecimal(fr));

                            //now post it
                            if (thisFreq != null)
                            {
                                request = new RestRequest(Method.POST);
                                request.Resource = "/catalogs/{catalogId}/addFrequency";
                                request.AddParameter("catalogId", aCatalog.CATALOG_ID, ParameterType.UrlSegment);
                                request.RequestFormat = DataFormat.Xml;
                                request.XmlSerializer = new RestSharp.Serializers.DotNetXmlSerializer();
                                request.AddBody(thisFreq);
                                siteFreqs = serviceCaller.Execute<List<FREQUENCY_TYPE>>(request);
                            }
                        }
                    }
                }

                //get all the catalogParameters that were on this site.. remove them all, then go through and add the ones passed
                request = new RestRequest();
                request.Resource = "/catalogs/{catalogId}/parameters";
                request.RootElement = "ArrayOfParameter_type";
                request.AddParameter("catalogId", aCatalog.CATALOG_ID, ParameterType.UrlSegment);
                List<PARAMETER_TYPE> parameters = serviceCaller.Execute<List<PARAMETER_TYPE>>(request);

                if (parameters != null)
                {
                    foreach (PARAMETER_TYPE p in parameters)
                    {
                        //remove it
                        request = new RestRequest(Method.POST);
                        request.Resource = "/catalogs/{catalogId}/removeParameter";
                        request.AddParameter("catalogId", aCatalog.CATALOG_ID, ParameterType.UrlSegment);
                        request.AddHeader("X-HTTP-Method-Override", "DELETE");
                        request.AddHeader("Content-Type", "application/xml");
                        request.XmlSerializer = new RestSharp.Serializers.DotNetXmlSerializer();
                        request.AddBody(p);
                        serviceCaller.Execute<PARAMETER_TYPE>(request);
                    }
                }
                    
                //now post those 
                string theseParams = editedSite.SiteParameters;
                if (!string.IsNullOrWhiteSpace(theseParams))
                {
                    List<PARAMETER_TYPE> siteParameters = new List<PARAMETER_TYPE>();
                    //parse and post
                    string[] param = Regex.Split(theseParams, ",");
                    foreach (string p in param)
                    {
                        if (!string.IsNullOrWhiteSpace(p))
                        {
                            //get it
                            PARAMETER_TYPE thisParam = GetAParameter(Convert.ToDecimal(p));

                            if (thisParam != null)
                            {
                                //now post it      
                                request = new RestRequest(Method.POST);
                                request.Resource = "/catalogs/{catalogId}/addParameter";
                                request.AddParameter("catalogId", aCatalog.CATALOG_ID, ParameterType.UrlSegment);
                                request.RequestFormat = DataFormat.Xml;
                                request.XmlSerializer = new RestSharp.Serializers.DotNetXmlSerializer();
                                request.AddBody(thisParam);
                                siteParameters = serviceCaller.Execute<List<PARAMETER_TYPE>>(request);
                            }
                        }
                    }
                }
                return RedirectToAction("SiteDetails", new { id = aCatalog.CATALOG_ID, projId = aCatalog.PROJECT_ID });
            }
            catch (Exception e)
            {
                return View(e.ToString());
            }
        }        


        //GET: get this particular project based on id
        private PROJECT GetThisProject(int id)
        {
            LaMPServiceCaller serviceCaller = LaMPServiceCaller.Instance;
            var request = new RestRequest();
            request.Resource = "/projects/{projectId}";
            request.RootElement = "projects";
            request.AddParameter("projectId", id, ParameterType.UrlSegment);
            PROJECT thisProject = serviceCaller.Execute<PROJECT>(request);
            return thisProject;
        }
        
        private RESOURCE_TYPE GetAResourceType(decimal id)
        {
            LaMPServiceCaller serviceCaller = LaMPServiceCaller.Instance;
            var request = new RestRequest();
            request.Resource = "/resourcetypes/{resourceTypeId}";
            request.RootElement = "RESOURCE_TYPE";
            request.AddParameter("resourceTypeId", id, ParameterType.UrlSegment);
            RESOURCE_TYPE thisResource = serviceCaller.Execute<RESOURCE_TYPE>(request);
            return thisResource;
        }

        private List<CATALOG_> GetProjectCatalogs(decimal id)
        {
            LaMPServiceCaller serviceCaller = LaMPServiceCaller.Instance;
            var request = new RestRequest();
            request.Resource = "projects/{projectId}/catalogs";
            request.RootElement = "ArrayOfCATALOG";
            request.AddParameter("projectId", id, ParameterType.UrlSegment);
            List<CATALOG_> CatList = serviceCaller.Execute<List<CATALOG_>>(request);
            return CatList;
        }

        private LOCATION GetALocation(decimal? id)
        {
            LaMPServiceCaller serviceCaller = LaMPServiceCaller.Instance;
            var request = new RestRequest();
            request.Resource = "/sites/{siteId}";
            request.RootElement = "LOCATION";
            request.AddParameter("siteId", id, ParameterType.UrlSegment);
            LOCATION thisLocation = serviceCaller.Execute<LOCATION>(request);
            return thisLocation;
        }

        private MEDIA_TYPE GetAMedia(decimal? id)
        {
            LaMPServiceCaller serviceCaller = LaMPServiceCaller.Instance;
            var request = new RestRequest();
            request.Resource = "/media/{mediaId}";
            request.RootElement = "MEDIA_TYPE";
            request.AddParameter("mediaId", id, ParameterType.UrlSegment);
            MEDIA_TYPE thisMedia = serviceCaller.Execute<MEDIA_TYPE>(request);
            return thisMedia;
        }

        private FREQUENCY_TYPE GetAFrequency(decimal? id)
        {
            LaMPServiceCaller serviceCaller = LaMPServiceCaller.Instance;
            var request = new RestRequest();
            request.Resource = "/frequencies/{frequencyId}";
            request.RootElement = "FREQUENCY_TYPE";
            request.AddParameter("frequencyId", id, ParameterType.UrlSegment);
            FREQUENCY_TYPE thisFreq = serviceCaller.Execute<FREQUENCY_TYPE>(request);
            return thisFreq;
        }

        private PARAMETER_TYPE GetAParameter(decimal? id)
        {
            LaMPServiceCaller serviceCaller = LaMPServiceCaller.Instance;
            var request = new RestRequest();
            request.Resource = "/parameters/{parameterId}";
            request.RootElement = "PARAMETER_TYPE";
            request.AddParameter("parameterId", id, ParameterType.UrlSegment);
            PARAMETER_TYPE thisParam = serviceCaller.Execute<PARAMETER_TYPE>(request);
            return thisParam;
        }

        private List<string> GetStates()
        {
            List<string> States = new List<string>();
            States.Add("Illinois");
            States.Add("Indiana");
            States.Add("Michigan");
            States.Add("Minnesota");
            States.Add("New York");
            States.Add("Ohio");
            States.Add("Ontario");
            States.Add("Pennsylvania");
            States.Add("Quebec");
            States.Add("Wisconsin");
            return States;
        }

        private List<string> GetCountries()
        {
            List<string> Countries = new List<string>();
            Countries.Add("Canada");
            Countries.Add("United States Of America");
            return Countries;
        }

        private List<LAKE_TYPE> GetLakes()
        {
            LaMPServiceCaller serviceCaller = LaMPServiceCaller.Instance;
            var request = new RestRequest();
            request.Resource = "lakes/";
            request.RootElement = "ArrayOfLAKE_TYPE";
            List<LAKE_TYPE> Lakes = serviceCaller.Execute<List<LAKE_TYPE>>(request);
                      
            return Lakes;
        }

        private List<STATUS_TYPE> GetStatusTypes()
        {
            LaMPServiceCaller serviceCaller = LaMPServiceCaller.Instance;
            var request = new RestRequest();
            request.Resource = "status/";
            request.RootElement = "ArrayOfSTATUS_TYPE";
            List<STATUS_TYPE> status = serviceCaller.Execute<List<STATUS_TYPE>>(request);

            return status;
        
        }

        private List<RESOURCE_TYPE> GetResources()
        {
            LaMPServiceCaller serviceCaller = LaMPServiceCaller.Instance;
            var request = new RestRequest();
            request.Resource = "/resourcetypes";
            request.RootElement = "ArrayOfRESOURCE_TYPE";
            List<RESOURCE_TYPE> Resources = serviceCaller.Execute<List<RESOURCE_TYPE>>(request);

            return Resources;
        }

        private List<MEDIA_TYPE> GetMedia()
        {
            LaMPServiceCaller serviceCaller = LaMPServiceCaller.Instance;
            var request = new RestRequest();
            request.Resource = "/media";
            request.RootElement = "ArrayOfMEDIA_TYPE";
            List<MEDIA_TYPE> Media = serviceCaller.Execute<List<MEDIA_TYPE>>(request);

            return Media;
        }

        private List<FREQUENCY_TYPE> GetSampleFreq()
        {
            LaMPServiceCaller serviceCaller = LaMPServiceCaller.Instance;
            var request = new RestRequest();
            request.Resource = "/frequencies";
            request.RootElement = "ArrayOfFREQUENCY_TYPE";
            List<FREQUENCY_TYPE> frequency = serviceCaller.Execute<List<FREQUENCY_TYPE>>(request);

            return frequency;
        }

    }
}
