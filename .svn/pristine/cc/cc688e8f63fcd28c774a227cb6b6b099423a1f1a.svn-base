//------------------------------------------------------------------------------
//----- StatusTypeHandler -----------------------------------------------------------
//------------------------------------------------------------------------------

//-------1---------2---------3---------4---------5---------6---------7---------8
//       01234567890123456789012345678901234567890123456789012345678901234567890
//-------+---------+---------+---------+---------+---------+---------+---------+

// copyright:   2012 WiM - USGS

//    authors:  Jeremy K. Newson USGS Wisconsin Internet Mapping
//              
//  
//   purpose:   Handles media type resources through the HTTP uniform interface.
//              Equivalent to the controller in MVC.
//
//discussion:   Handlers are objects which handle all interaction with resources in 
//              this case the resources are POCO classes derived from the EF. 
//               https://github.com/openrasta/openrasta/wiki/Handlers
//
//     
#region Comments
// 08.21.12 - jkn - Created
#endregion


using System;
using System.Collections.Generic;
using System.Linq;
using System.Web;

using LaMPServices.Authentication;
using OpenRasta.Web;
using OpenRasta.Security;

namespace LaMPServices.Handlers
{
    public class ProjectKeywordHandler
    {
        #region Properties

        // will be automatically injected by DI in OpenRasta
        public ICommunicationContext Context { get; set; }

        private string connectionString = @"metadata=res://*/LaMPDSModel.csdl|res://*/LaMPDSModel.ssdl|res://*/LaMPDSModel.msl;provider=Oracle.DataAccess.Client;provider connection string=""DATA SOURCE=LAMPRDS;USER ID={0};PASSWORD={1}""";

        #endregion

        #region Routed Methods

        #region GetMethods
        [HttpOperation(HttpMethod.GET)]
        public OperationResult Get()
        {
            List<PROJECT_KEYWORDS> projectKeywordList;

            //Get basic authentication password
            // using (EasySecureString securedPassword = new EasySecureString(
            //                        LaMPBasicAuthentication.ExtractBasicHeader(Context.Request.Headers["Authorization"]).Password))
            /// {
            using (LaMPDSEntities Context = new LaMPDSEntities(string.Format(connectionString, "lampadmin", "cafOR4_yR")))
            {

                projectKeywordList = Context.PROJECT_KEYWORDS.OrderBy(pKey => pKey.PROJECT_KEYWORDS_ID).ToList();

            }//end using
            //  }//end using

            return new OperationResult.OK { ResponseResource = projectKeywordList };
        }//end httpMethod get


        [HttpOperation(HttpMethod.GET)]
        public OperationResult Get(Int32 projectKeywordID)
        {
            PROJECT_KEYWORDS aProjectKeyword;

            //return BadRequest if ther is no ID
            if (projectKeywordID <= 0)
            {
                return new OperationResult.BadRequest();
            }

            //Get basic authentication password
            // using (EasySecureString securedPassword = new EasySecureString(
            //                        LaMPBasicAuthentication.ExtractBasicHeader(Context.Request.Headers["Authorization"]).Password))
            /// {
            using (LaMPDSEntities Context = new LaMPDSEntities(string.Format(connectionString, "lampadmin", "cafOR4_yR")))
            {

                aProjectKeyword = Context.PROJECT_KEYWORDS.SingleOrDefault(pkey => pkey.PROJECT_KEYWORDS_ID == projectKeywordID);


            }//end using
            //  }//end using

            return new OperationResult.OK { ResponseResource = aProjectKeyword };
        }//end httpMethod get

        #endregion

        #region PostMethods
        /// 
        /// Force the user to provide authentication 
        /// 
        //[RequiresAuthentication]
        [HttpOperation(HttpMethod.POST)]
        public OperationResult Post(PROJECT_KEYWORDS aProjectKeyword)
        {
            //Return BadRequest if missing required fields
            if (aProjectKeyword.PROJECT_ID <= 0 || aProjectKeyword.KEYWORD_ID <= 0)
            {
                return new OperationResult.BadRequest();
            }

            //Get basic authentication password
            //using (EasySecureString securedPassword = new EasySecureString(
            //                      LaMPBasicAuthentication.ExtractBasicHeader(Context.Request.Headers["Authorization"]).Password))
            //{
            using (LaMPDSEntities Context = new LaMPDSEntities(string.Format(connectionString, "lampadmin", "cafOR4_yR")))
            {
                //Check for existing project
                PROJECT_KEYWORDS existingProjectKeywords = Context.PROJECT_KEYWORDS.FirstOrDefault(p => p.PROJECT_ID == aProjectKeyword.PROJECT_ID &&
                                                                                                        p.KEYWORD_ID == aProjectKeyword.KEYWORD_ID);
                if (existingProjectKeywords == null)
                {
                    Context.PROJECT_KEYWORDS.AddObject(aProjectKeyword);

                    Context.SaveChanges(); 
                }
                else //return existing
                {
                    aProjectKeyword = existingProjectKeywords;
                }

 
            }// end using

            // } end using

            //Return object to verify persisitance
            return new OperationResult.OK { ResponseResource = aProjectKeyword };
        }//end Post

        #endregion

        #region PutMethods


        #endregion

        #region DeleteMethods


        #endregion

        #endregion

        #region Helper Methods

        #endregion

    }//end StatusTypeHandler
}//end namespace