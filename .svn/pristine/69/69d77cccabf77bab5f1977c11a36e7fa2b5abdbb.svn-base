//------------------------------------------------------------------------------
//----- FrequencyTypeHandler -----------------------------------------------------------
//------------------------------------------------------------------------------

//-------1---------2---------3---------4---------5---------6---------7---------8
//       01234567890123456789012345678901234567890123456789012345678901234567890
//-------+---------+---------+---------+---------+---------+---------+---------+

// copyright:   2012 WiM - USGS

//    authors:  Jeremy K. Newson USGS Wisconsin Internet Mapping
//              
//  
//   purpose:   Handles frequency type resources through the HTTP uniform interface.
//              Equivalent to the controller in MVC.
//
//discussion:   Handlers are objects which handle all interaction with resources in 
//              this case the resources are POCO classes derived from the EF. 
//               https://github.com/openrasta/openrasta/wiki/Handlers
//
//     
#region Comments
// 05.02.12 - jkn - Created
#endregion  



using System;
using System.Collections.Generic;
using System.Linq;
using System.Web;

using LaMPServices.Authentication;
using OpenRasta.Web;
using OpenRasta.Security;

namespace LaMPServices.Handlers
{
    public class FrequencyTypeHandler:HandlerBase
    {
        #region Routed Methods

        #region GetMethods

        [HttpOperation(HttpMethod.GET)]
        public OperationResult Get()
        {
            List<FREQUENCY_TYPE> frequencyTypes;

            //Get basic authentication password
            using (EasySecureString securedPassword = GetSecuredPassword())
            {
                using (LaMPDSEntities aLaMPRDS = GetRDS(securedPassword))
                {

                    frequencyTypes = aLaMPRDS.FREQUENCY_TYPE.OrderBy(f => f.FREQUENCY_TYPE_ID).ToList();

                }//end using
            }//end using

            return new OperationResult.OK { ResponseResource = frequencyTypes };
        }//end httpMethod get

        [HttpOperation(HttpMethod.GET)]
        public OperationResult Get(Int32 frequencyTypeId)
        {
            FREQUENCY_TYPE aFrequencyType;

            //return BadRequest if ther is no ID
            if (frequencyTypeId <= 0)
            {
                return new OperationResult.BadRequest();
            }

            //Get basic authentication password
            using (EasySecureString securedPassword = GetSecuredPassword())
            {
                using (LaMPDSEntities aLaMPRDS = GetRDS(securedPassword))
                {

                    aFrequencyType = aLaMPRDS.FREQUENCY_TYPE.Single(f => f.FREQUENCY_TYPE_ID == frequencyTypeId);


                }//end using
            }//end using

            return new OperationResult.OK { ResponseResource = aFrequencyType };
        }//end httpMethod get

        #endregion

        #region PostMethods
        /// 
        /// Force the user to provide authentication 
        /// 
        [RequiresRole(AdminRole)]
        [HttpOperation(HttpMethod.POST)]
        public OperationResult Post(FREQUENCY_TYPE aFrequencyType)
        {
            //Return BadRequest if missing required fields
            if (String.IsNullOrEmpty(aFrequencyType.FREQUENCY))
            {return new OperationResult.BadRequest();}

            //Get basic authentication password
            using (EasySecureString securedPassword = GetSecuredPassword())
            {
                using (LaMPDSEntities aLaMPRDS = GetRDS(securedPassword))
                {
                    
                    if (!Exists(aLaMPRDS.FREQUENCY_TYPE, ref aFrequencyType))
                    {
                    //set ID
                    aFrequencyType.FREQUENCY_TYPE_ID = GetNextFrequencyID(aLaMPRDS.FREQUENCY_TYPE);

                        aLaMPRDS.FREQUENCY_TYPE.AddObject(aFrequencyType);
                    aLaMPRDS.SaveChanges();
                    
                    }
                    
                }// end using

            }// end using

            //Return object to verify persisitance
            return new OperationResult.OK { ResponseResource = aFrequencyType };
        }//end Post

        #endregion

        #region PutMethods

        [RequiresRole(AdminRole)]
        [HttpOperation(HttpMethod.PUT)]
        public OperationResult Put(Int32 frequencyTypeId, FREQUENCY_TYPE instance)
        {
            //Return BadRequest if missing required fields
            if ((frequencyTypeId <= 0))
            {return new OperationResult.BadRequest();}


            //Get basic authentication password
            using (EasySecureString securedPassword = GetSecuredPassword())
            {
                using (LaMPDSEntities aLaMPRDS = GetRDS(securedPassword))
                {
                    //fetch the object to be updated (assuming that it exists)
                    FREQUENCY_TYPE ObjectToBeUpdated = aLaMPRDS.FREQUENCY_TYPE.Single(f => f.FREQUENCY_TYPE_ID == frequencyTypeId);

                    //FREQUENCY
                    ObjectToBeUpdated.FREQUENCY = (string.IsNullOrEmpty(instance.FREQUENCY) ?
                        ObjectToBeUpdated.FREQUENCY : instance.FREQUENCY);

                    aLaMPRDS.SaveChanges();
                }// end using

            }// end using

            //Return object to verify persisitance
            return new OperationResult.OK { ResponseResource = instance };
        }


        #endregion

        #region DeleteMethods

        [RequiresRole(AdminRole)]
        [HttpOperation(HttpMethod.DELETE)]
        public OperationResult Delete(Int32 frequencyTypeId)
        {
            //Return BadRequest if missing required fields
            if (frequencyTypeId <= 0)
            { return new OperationResult.BadRequest();}


            //Get basic authentication password
            using (EasySecureString securedPassword = GetSecuredPassword())
            {
                using (LaMPDSEntities aLaMPRDS = GetRDS(securedPassword))
                {
                    //fetch the object to be updated (assuming that it exists)
                    FREQUENCY_TYPE ObjectToBeDeleted = aLaMPRDS.FREQUENCY_TYPE.Single(f => f.FREQUENCY_TYPE_ID == frequencyTypeId);

                    //delete it
                    aLaMPRDS.FREQUENCY_TYPE.DeleteObject(ObjectToBeDeleted);
                    aLaMPRDS.SaveChanges();
                }// end using
            }// end using

            //Return object to verify persisitance
            return new OperationResult.OK { };
        }

        #endregion
        #endregion

        #region "Helper Methods"
        private Boolean Exists(System.Data.Objects.IObjectSet<FREQUENCY_TYPE> frequencies, ref FREQUENCY_TYPE aFrequencyType)
        {
            FREQUENCY_TYPE existingFrequencyType;
            FREQUENCY_TYPE thisFrequencyType = aFrequencyType;
            //check if it exists
            try
            {
                existingFrequencyType = frequencies.FirstOrDefault(f => f.FREQUENCY == thisFrequencyType.FREQUENCY);


                if (existingFrequencyType == null)
                    return false;

                //if exists then update ref contact
                aFrequencyType = existingFrequencyType;
                return true;

            }
            catch (Exception)
            {
                return false;
            }
        }

        private decimal GetNextFrequencyID(System.Data.Objects.IObjectSet<FREQUENCY_TYPE> frequencies)
        {
            decimal nextKey = 1;
            if (frequencies.Count() > 0)
            {
                nextKey = frequencies.OrderByDescending(f => f.FREQUENCY_TYPE_ID).First().FREQUENCY_TYPE_ID + 1;
            }

            return nextKey;
        }
        #endregion
    }//end FrequencyTypehandler
}//end namespace