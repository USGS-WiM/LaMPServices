//------------------------------------------------------------------------------
//----- KeywordHandler -----------------------------------------------------------
//------------------------------------------------------------------------------

//-------1---------2---------3---------4---------5---------6---------7---------8
//       01234567890123456789012345678901234567890123456789012345678901234567890
//-------+---------+---------+---------+---------+---------+---------+---------+

// copyright:   2012 WiM - USGS

//    author:   Jeremy K. Newson  USGS Wisconsin Internet Mapping
//  
//   purpose:   Handles publication resources through the HTTP uniform interface.
//              Equivalent to the controller in MVC.
//
//discussion:   Handlers are objects which handle all interaction with resources in 
//              this case the resources are POCO classes derived from the EF. 
//               https://github.com/openrasta/openrasta/wiki/Handlers
//
//     
#region Comments
// 04.15.12 - jkn - Created
#endregion                          


using System;
using System.Collections.Generic;
using System.Linq;
using System.Web;

using OpenRasta.Web;
using OpenRasta.Security;

using LaMPServices.Authentication;


namespace LaMPServices.Handlers
{
    public class KeywordHandler: HandlerBase
    {
        #region Routed Methods

        #region GetMethods

        [RequiresAuthentication]
        [HttpOperation(HttpMethod.GET)]
        public OperationResult Get()
        {
            //KeywordList keywords = new KeywordList();
            List<KEYWORD> kywrds;

            //Get basic authentication password
            using (EasySecureString securedPassword = GetSecuredPassword())
            {
                using (LaMPDSEntities aLaMPRDS = GetRDS(securedPassword))
                {
                    //Context.ContextOptions.ProxyCreationEnabled = false;
                    kywrds = aLaMPRDS.KEYWORDS.OrderBy(k => k.KEYWORD_ID).ToList();

                }//end using
            }//end using

            return new OperationResult.OK { ResponseResource = kywrds };
        }//end httpMethod get

        //[HttpOperation(HttpMethod.GET)]
        //public OperationResult Get()
        //{
        //    //KeywordList keywords = new KeywordList();
        //    List<Resources.KeywordBase> kywrds = new List<Resources.KeywordBase>();

        //    //Get basic authentication password
        //    // using (EasySecureString securedPassword = new EasySecureString(
        //    //                        LaMPBasicAuthentication.ExtractBasicHeader(Context.Request.Headers["Authorization"]).Password))
        //    /// {
        //    using (LaMPDSEntities Context = new LaMPDSEntities(string.Format(connectionString, "lampadmin", "cafOR4_yR")))
        //    {
        //        //Context.ContextOptions.ProxyCreationEnabled = false;
        //        kywrds = Context.KEYWORDS.AsEnumerable().Select(k => new Resources.SimpleKeyword
        //                                                                            {KeywordId = Convert.ToInt32(k.KEYWORD_ID),
        //                                                                              Term = (k.TERM!=null)? k.TERM: "" }
        //                                                                              ).ToList<Resources.KeywordBase>();

        //    }//end using
        //    //  }//end using

        //    return new OperationResult.OK { ResponseResource = kywrds };
        //}//end httpMethod get

        [RequiresAuthentication]
        [HttpOperation(HttpMethod.GET)]
        public OperationResult Get(Int32 keywordId)
        {
            KEYWORD aKeyword;

            //return BadRequest if ther is no ID
            if (keywordId <= 0)
            {
                return new OperationResult.BadRequest();
            }

            //Get basic authentication password
            using (EasySecureString securedPassword = GetSecuredPassword())
            {
                using (LaMPDSEntities aLaMPRDS = GetRDS(securedPassword))
                {
                    aKeyword = aLaMPRDS.KEYWORDS.Single(k => k.KEYWORD_ID == keywordId);
                }//end using
            }//end using

            return new OperationResult.OK { ResponseResource = aKeyword };
        }//end httpMethod get

        #endregion

        #region PostMethods
       
        /// 
        /// Force the user to provide authentication 
        /// 
        [RequiresAuthentication]
        [HttpOperation(HttpMethod.POST, ForUriName = "CreateKeyword")]
        public OperationResult Post(KEYWORD aKeyword)
        {
            //Return BadRequest if missing required fields
            if (String.IsNullOrEmpty(aKeyword.TERM))
            {
                return new OperationResult.BadRequest();
            }

            //Get basic authentication password
            using (EasySecureString securedPassword = GetSecuredPassword())
            {
                using (LaMPDSEntities aLaMPRDS = GetRDS(securedPassword))
                {
                    //check if it exists
                    KEYWORD existingKeyword = aLaMPRDS.KEYWORDS.FirstOrDefault(k => k.TERM.Trim().ToUpper() == aKeyword.TERM.Trim().ToUpper());

                    if (existingKeyword == null)
                    {
                        decimal nextKey = 1;
                        if (aLaMPRDS.KEYWORDS.Count() > 0)
                        {
                            nextKey = aLaMPRDS.KEYWORDS.OrderByDescending(k => k.KEYWORD_ID).First().KEYWORD_ID + 1;
                        }

                        //set ID
                        aKeyword.KEYWORD_ID = nextKey;

                        aLaMPRDS.KEYWORDS.AddObject(aKeyword);
                        aLaMPRDS.SaveChanges();
                    }
                    else// return existing
                    {
                        aKeyword = existingKeyword;
                    }//end if

                }// end using
            }// end using

            //Return object to verify persisitance
            return new OperationResult.OK { ResponseResource = aKeyword };
        }

        ////[RequiresAuthentication]
        //[HttpOperation(HttpMethod.POST)]
        //public OperationResult Post(List<KEYWORD> aKeywordList)
        //{
        //    //Return BadRequest if missing required fields
        //    if (aKeywordList.Count <= 0)
        //    {
        //        return new OperationResult.BadRequest();
        //    }

        //    //Get basic authentication password
        //    //using (EasySecureString securedPassword = new EasySecureString(
        //    //                      LaMPBasicAuthentication.ExtractBasicHeader(Context.Request.Headers["Authorization"]).Password))
        //    //{
        //    using (LaMPDSEntities Context = new LaMPDSEntities(string.Format(connectionString, "lampadmin", "cafOR4_yR")))
        //    {
        //    
        //        decimal nextKeyId = GetNextId();

        //        foreach (KEYWORD item in aKeywordList)
        //        {
        //            //check if it exists
        //            KEYWORD existingKeyword = Context.KEYWORDS.FirstOrDefault(k => k.TERM.Trim().ToUpper() == item.TERM.Trim().ToUpper());

        //            if (existingKeyword == null)
        //            {
        //                item.KEYWORD_ID = nextKeyId;
        //                Context.KEYWORDS.AddObject(item);
        //                Context.SaveChanges();
        //            }
        //            else// return existing
        //            {
        //                //remove stored item
        //                aKeywordList.Remove(item);
        //                //replace with existing
        //                aKeywordList.Add(existingKeyword);
        //            }//end if

        //        }//next item

        //        Context.SaveChanges();
        //    }// end using

        //    //} end using

        //    //Return object to verify persisitance
        //    return new OperationResult.OK { ResponseResource = aKeywordList };
        //}
        #endregion

        #region PutMethods

        [RequiresAuthentication]
        [HttpOperation(HttpMethod.PUT, ForUriName = "UpdateKeyword")]
        public OperationResult Post(Int32 keywordId, KEYWORD instance)
        {
            //Return BadRequest if missing required fields
            if ((keywordId <=0 ) && string.IsNullOrEmpty(instance.TERM))
            {
                return new OperationResult.BadRequest();
            }


            //Get basic authentication password
            using (EasySecureString securedPassword = GetSecuredPassword())
            {
                using (LaMPDSEntities aLaMPRDS = GetRDS(securedPassword))
                {
                    //fetch the object to be updated (assuming that it exists)
                    KEYWORD ObjectToBeUpdated = aLaMPRDS.KEYWORDS.Single(k => k.KEYWORD_ID == keywordId);

                    //term
                    ObjectToBeUpdated.TERM = (string.IsNullOrEmpty(instance.TERM) ?
                        ObjectToBeUpdated.TERM : instance.TERM);

                    aLaMPRDS.SaveChanges();
                }// end using

            }// end using

            //Return object to verify persisitance
            return new OperationResult.OK { ResponseResource = instance };
        }


        #endregion

        #region DeleteMethods

        [RequiresAuthentication]
        [HttpOperation(HttpMethod.DELETE, ForUriName = "DeleteKeyword")]
        public OperationResult Post(Int32 keywordId)
        {
            //Return BadRequest if missing required fields
            if (keywordId <= 0)
            {
                return new OperationResult.BadRequest();
            }


            //Get basic authentication password
            using (EasySecureString securedPassword = GetSecuredPassword())
            {
                using (LaMPDSEntities aLaMPRDS = GetRDS(securedPassword))
                {
                    //fetch the object to be updated (assuming that it exists)
                    KEYWORD ObjectToBeDeleted = aLaMPRDS.KEYWORDS.Single(k => k.KEYWORD_ID == keywordId);
                    //delete it
                    aLaMPRDS.KEYWORDS.DeleteObject(ObjectToBeDeleted);
                    aLaMPRDS.SaveChanges();

                }// end using

            }// end using

            //Return object to verify persisitance
            return new OperationResult.OK {};
        }

        #endregion

        #endregion
    }// end KeywordHandler

}// end namespace