//------------------------------------------------------------------------------
//----- MediaTypeHandler -----------------------------------------------------------
//------------------------------------------------------------------------------

//-------1---------2---------3---------4---------5---------6---------7---------8
//       01234567890123456789012345678901234567890123456789012345678901234567890
//-------+---------+---------+---------+---------+---------+---------+---------+

// copyright:   2012 WiM - USGS

//    authors:  Jeremy K. Newson USGS Wisconsin Internet Mapping
//              
//  
//   purpose:   Handles media type resources through the HTTP uniform interface.
//              Equivalent to the controller in MVC.
//
//discussion:   Handlers are objects which handle all interaction with resources in 
//              this case the resources are POCO classes derived from the EF. 
//               https://github.com/openrasta/openrasta/wiki/Handlers
//
//     
#region Comments
// 05.02.12 - jkn - Created
#endregion  


using System;
using System.Collections.Generic;
using System.Linq;
using System.Web;

using LaMPServices.Authentication;
using OpenRasta.Web;
using OpenRasta.Security;

namespace LaMPServices.Handlers
{
    public class MediaHandler: HandlerBase
    {
        
        #region Routed Methods

        #region GetMethods
        [RequiresAuthentication]
        [HttpOperation(HttpMethod.GET)]
        public OperationResult Get()
        {
            List<MEDIA_TYPE> mediaList;

            //Get basic authentication password
            using (EasySecureString securedPassword = GetSecuredPassword())
            {
                using (LaMPDSEntities aLaMPRDS = GetRDS(securedPassword))
                {

                    mediaList = aLaMPRDS.MEDIA_TYPE.OrderBy(m => m.MEDIA_TYPE_ID).ToList();

                }//end using
            }//end using

            if (mediaList != null)
                mediaList.ForEach(x => x.LoadLinks(Context.ApplicationBaseUri.AbsoluteUri, linkType.e_group));
            
            return new OperationResult.OK { ResponseResource = mediaList };
        }//end httpMethod get

        [RequiresAuthentication]
        [HttpOperation(HttpMethod.GET)]
        public OperationResult Get(Int32 mediaId)
        {
            MEDIA_TYPE aMedia;

            //return BadRequest if ther is no ID
            if (mediaId <= 0)
            {
                return new OperationResult.BadRequest();
            }

            //Get basic authentication password
            using (EasySecureString securedPassword = GetSecuredPassword())
            {
                using (LaMPDSEntities aLaMPRDS = GetRDS(securedPassword))
                {

                    aMedia = aLaMPRDS.MEDIA_TYPE.SingleOrDefault(m => m.MEDIA_TYPE_ID == mediaId);

                }//end using
            }//end using

            if (aMedia != null)
                aMedia.LoadLinks(Context.ApplicationBaseUri.AbsoluteUri, linkType.e_individual);

            return new OperationResult.OK { ResponseResource = aMedia };
        }//end httpMethod get

        [RequiresAuthentication]
        [HttpOperation(HttpMethod.GET, ForUriName ="GetCatalogMedia")]
        public OperationResult GetCatalogMedia(Int32 catalogId)
        {
            List<MEDIA_TYPE> mediaList;

            //return BadRequest if ther is no ID
            if (catalogId <= 0)
            {
                return new OperationResult.BadRequest();
            }

            //Get basic authentication password
            using (EasySecureString securedPassword = GetSecuredPassword())
            {
                using (LaMPDSEntities aLaMPRDS = GetRDS(securedPassword))
                {

                    mediaList = aLaMPRDS.CATALOG_MEDIA.Where(cm => cm.CATALOG_ID == catalogId)
                                                                  .Select(cm=>cm.MEDIA_TYPE)
                                                                    .OrderBy(m=>m.MEDIA_TYPE_ID).ToList();
 
                }//end using
            }//end using

            if (mediaList != null)
                mediaList.ForEach(x => x.LoadLinks(Context.ApplicationBaseUri.AbsoluteUri, linkType.e_group));

            return new OperationResult.OK { ResponseResource = mediaList };
        }//end httpMethod get

        #endregion

        #region PostMethods
        /// 
        /// Force the user to provide authentication 
        /// 
        [RequiresAuthentication]
        [HttpOperation(HttpMethod.POST)]
        public OperationResult Post(MEDIA_TYPE aMedia)
        {
            //Return BadRequest if missing required fields
            if (String.IsNullOrEmpty(aMedia.MEDIA))
            {return new OperationResult.BadRequest();}

            //Get basic authentication password
            using (EasySecureString securedPassword = GetSecuredPassword())
            {
                using (LaMPDSEntities aLaMPRDS = GetRDS(securedPassword))
                {
                    if(!Exists(aLaMPRDS.MEDIA_TYPE, ref aMedia))
                    {
                        //set ID
                        //aMedia.MEDIA_TYPE_ID = GetNextMediaTypeID(aLaMPRDS.MEDIA_TYPE);

                        aLaMPRDS.MEDIA_TYPE.AddObject(aMedia);
                        aLaMPRDS.SaveChanges();
                    }
                }// end using
            }// end using

            if (aMedia != null)
                aMedia.LoadLinks(Context.ApplicationBaseUri.AbsoluteUri, linkType.e_individual);

            //Return object to verify persisitance
            return new OperationResult.OK { ResponseResource = aMedia };
        }//end Post

        [LaMPRequiresRole(new string[] { AdminRole, ManagerRole })]
        [HttpOperation(HttpMethod.POST, ForUriName = "AddCatalogMedium")]
        public OperationResult AddCatalogMedium(Int32 catalogId, MEDIA_TYPE aMedia)
        {
            CATALOG_MEDIA aCatalogMedia = null;
            List<MEDIA_TYPE> mediaList = null;
            //Return BadRequest if missing required fields
            if (catalogId <= 0 || String.IsNullOrEmpty(aMedia.MEDIA))
            { return new OperationResult.BadRequest(); }

            //Get basic authentication password
            using (EasySecureString securedPassword = GetSecuredPassword())
            {
                using (LaMPDSEntities aLaMPRDS = GetRDS(securedPassword))
                {

                    //check if valid project
                    if (aLaMPRDS.CATALOG_S.First(c => c.CATALOG_ID == catalogId) == null)
                        return new OperationResult.BadRequest { Description = "Catalog does not exist" };

                    //check authorization
                    if (!IsAuthorizedToEdit(aLaMPRDS.CATALOG_S.FirstOrDefault(c => c.CATALOG_ID == catalogId).PROJECT.DATA_MANAGER.USERNAME))
                        return new OperationResult.Forbidden { Description = "Not Authorized" };

                    if (!Exists(aLaMPRDS.MEDIA_TYPE, ref aMedia))
                    {
                        //set ID
                        //aParameter.PARAMETER_TYPE_ID = GetNextParameterID(aLaMPRDS.PARAMETER_TYPE);
                        aLaMPRDS.MEDIA_TYPE.AddObject(aMedia);
                        aLaMPRDS.SaveChanges();
                    }//end if

                    //add to catalolg
                    //first check if Catalog already contains parameter
                    if (aLaMPRDS.CATALOG_MEDIA.FirstOrDefault(cm => cm.MEDIA_TYPE_ID == aMedia.MEDIA_TYPE_ID &&
                                                                         cm.CATALOG_ID == catalogId) == null)
                    {//create one
                        aCatalogMedia = new CATALOG_MEDIA();
                        //set ID and create catalogMedia
                        aCatalogMedia.CATALOG_ID = catalogId;
                        aCatalogMedia.MEDIA_TYPE_ID = aMedia.MEDIA_TYPE_ID;

                        aLaMPRDS.CATALOG_MEDIA.AddObject(aCatalogMedia);
                        aLaMPRDS.SaveChanges();
                    }//end if

                    //return the list of contacts associated with project
                    mediaList = aLaMPRDS.MEDIA_TYPE.Where(m => m.CATALOG_MEDIA.Any(cm => cm.CATALOG_ID == catalogId)).ToList();

                    if (mediaList != null)
                        mediaList.ForEach(x => x.LoadLinks(Context.ApplicationBaseUri.AbsoluteUri, linkType.e_group));

                }// end using
            }// end using

            //Return object to verify persisitance
            return new OperationResult.OK { ResponseResource = mediaList };
        }
        #endregion

        #region PutMethods

        [RequiresRole(AdminRole)]
        [HttpOperation(HttpMethod.PUT)]
        public OperationResult Put(Int32 mediaId, MEDIA_TYPE instance)
        {
            //Return BadRequest if missing required fields
            if ((mediaId <= 0))
            {return new OperationResult.BadRequest();}


            //Get basic authentication password
            using (EasySecureString securedPassword = GetSecuredPassword())
            {
                using (LaMPDSEntities aLaMPRDS = GetRDS(securedPassword))
                {
                    //fetch the object to be updated (assuming that it exists)
                    MEDIA_TYPE ObjectToBeUpdated = aLaMPRDS.MEDIA_TYPE.SingleOrDefault(m => m.MEDIA_TYPE_ID == mediaId);

                    //MEDIA
                    ObjectToBeUpdated.MEDIA = (string.IsNullOrEmpty(instance.MEDIA) ?
                        ObjectToBeUpdated.MEDIA : instance.MEDIA);

                    aLaMPRDS.SaveChanges();
                }// end using
            }// end using

            if (instance != null)
                instance.LoadLinks(Context.ApplicationBaseUri.AbsoluteUri, linkType.e_individual);

            //Return object to verify persisitance
            return new OperationResult.OK { ResponseResource = instance };
        } 


        #endregion

        #region DeleteMethods

        [RequiresRole(AdminRole)]
        [HttpOperation(HttpMethod.DELETE)]
        public OperationResult Post(Int32 mediaTypeId)
        {
            //Return BadRequest if missing required fields
            if (mediaTypeId <= 0)
            { return new OperationResult.BadRequest();}


            //Get basic authentication password
            using (EasySecureString securedPassword = GetSecuredPassword())
            {
                using (LaMPDSEntities aLaMPRDS = GetRDS(securedPassword))
                {
                    //fetch the object to be updated (assuming that it exists)
                    MEDIA_TYPE ObjectToBeDeleted = aLaMPRDS.MEDIA_TYPE.SingleOrDefault(m => m.MEDIA_TYPE_ID == mediaTypeId);

                    //delete it
                    aLaMPRDS.MEDIA_TYPE.DeleteObject(ObjectToBeDeleted);
                    aLaMPRDS.SaveChanges();

                }// end using

            }// end using

            //Return object to verify persisitance
            return new OperationResult.OK { };
        }

        #endregion

        #endregion
        #region "Helper Methods"
        private Boolean Exists(System.Data.Objects.IObjectSet<MEDIA_TYPE> media, ref MEDIA_TYPE aMedia)
        {
            MEDIA_TYPE existingMedia;
            MEDIA_TYPE thisMedia = aMedia;
            //check if it exists
            try
            {
                existingMedia = media.FirstOrDefault(m => string.Equals(m.MEDIA.ToUpper(),thisMedia.MEDIA.ToUpper()));

                if (existingMedia == null)
                    return false;

                //if exists then update ref
                aMedia = existingMedia;
                return true;

            }
            catch (Exception)
            {
                return false;
            }
        }

        //private decimal GetNextMediaTypeID(System.Data.Objects.IObjectSet<MEDIA_TYPE> media)
        //{
        //    decimal nextKey = 1;
        //    if (media.Count() > 0)
        //    {
        //        nextKey = media.OrderByDescending(m => m.MEDIA_TYPE_ID).First().MEDIA_TYPE_ID + 1;
        //    }

        //    return nextKey;
        //}
        #endregion
    }//end MediaTypeHandler
}//end namespace