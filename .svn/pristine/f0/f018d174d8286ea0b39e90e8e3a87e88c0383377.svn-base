//------------------------------------------------------------------------------
//----- PublicationHandler -----------------------------------------------------------
//------------------------------------------------------------------------------

//-------1---------2---------3---------4---------5---------6---------7---------8
//       01234567890123456789012345678901234567890123456789012345678901234567890
//-------+---------+---------+---------+---------+---------+---------+---------+

// copyright:   2012 WiM - USGS

//    authors:  Jeremy K. Newson USGS Wisconsin Internet Mapping
//              
//  
//   purpose:   Handles publication resources through the HTTP uniform interface.
//              Equivalent to the controller in MVC.
//
//discussion:   Handlers are objects which handle all interaction with resources in 
//              this case the resources are POCO classes derived from the EF. 
//               https://github.com/openrasta/openrasta/wiki/Handlers
//
//     
#region Comments
// 04.25.12 - jkn - Created
#endregion                          


using System;
using System.Collections.Generic;
using System.Linq;
using System.Web;

using LaMPServices.Authentication;
using OpenRasta.Web;
using OpenRasta.Security;

namespace LaMPServices.Handlers
{
    public class PublicationHandler:HandlerBase
    {
        #region Routed Methods

        #region GetMethods
        [RequiresAuthentication]
        [HttpOperation(HttpMethod.GET)]
        public OperationResult Get()
        {
            List<PUBLICATION> pubs;

            //Get basic authentication password
            using (EasySecureString securedPassword = GetSecuredPassword())
            {
                using (LaMPDSEntities aLaMPRDS = GetRDS(securedPassword))
                {

                    pubs = aLaMPRDS.PUBLICATIONS.OrderBy(p => p.PUBLICATION_ID).ToList();

                }//end using
            }//end using

            return new OperationResult.OK { ResponseResource = pubs };
        }//end httpMethod get

        [RequiresAuthentication]
        [HttpOperation(HttpMethod.GET)]
        public OperationResult Get(Int32 publicationId)
        {
            PUBLICATION aPub;

            //return BadRequest if ther is no ID
            if (publicationId <= 0)
            {
                return new OperationResult.BadRequest();
            }

            //Get basic authentication password
            using (EasySecureString securedPassword = GetSecuredPassword())
            {
                using (LaMPDSEntities aLaMPRDS = GetRDS(securedPassword))
                {
                    aPub = aLaMPRDS.PUBLICATIONS.Single(p => p.PUBLICATION_ID == publicationId);

                }//end using
            }//end using

            return new OperationResult.OK { ResponseResource = aPub };
        }//end httpMethod get

        #endregion

        #region PostMethods
        /// 
        /// Force the user to provide authentication 
        /// 
        [RequiresAuthentication]
        [HttpOperation(HttpMethod.POST, ForUriName = "CreatePublication")]
        public OperationResult Post(PUBLICATION aPub)
        {
            //Return BadRequest if missing required fields
            if (String.IsNullOrEmpty(aPub.CITATION) && String.IsNullOrEmpty(aPub.URL))
            {
                return new OperationResult.BadRequest();
            }

            //Get basic authentication password
            using (EasySecureString securedPassword = GetSecuredPassword())
            {
                using (LaMPDSEntities aLaMPRDS = GetRDS(securedPassword))
                {

                    //check if it exists
                    PUBLICATION existingPub = aLaMPRDS.PUBLICATIONS.FirstOrDefault(p => (p.CITATION.Trim().ToUpper() == aPub.CITATION.Trim().ToUpper() || string.IsNullOrEmpty(aPub.CITATION)) &&
                                                                                       (p.URL.ToUpper().Trim() == aPub.URL.ToUpper().Trim() || string.IsNullOrEmpty(aPub.URL)));

                    if (existingPub == null)
                    {
                        decimal nextKey = 1;
                        if (aLaMPRDS.PUBLICATIONS.Count() > 0)
                        {
                            nextKey = aLaMPRDS.PUBLICATIONS.OrderByDescending(p=>p.PUBLICATION_ID).First().PUBLICATION_ID + 1;
                        }

                        //set ID
                        aPub.PUBLICATION_ID = nextKey;

                        aLaMPRDS.PUBLICATIONS.AddObject(aPub);

                        aLaMPRDS.SaveChanges();
                    }
                    else 
                    {
                        aPub = existingPub;
                    }//end if
                }// end using

            }// end using

            //Return object to verify persisitance
            return new OperationResult.OK { ResponseResource = aPub };
        }

        [RequiresAuthentication]
        [HttpOperation(HttpMethod.POST, ForUriName = "CreatePublicationList")]
        public OperationResult Post(List<PUBLICATION> aPublications)
        {
            //Return BadRequest if missing required fields
            if (aPublications.Count <= 0)
            {
                return new OperationResult.BadRequest();
            }

            //Get basic authentication password
            using (EasySecureString securedPassword = GetSecuredPassword())
            {
                using (LaMPDSEntities aLaMPRDS = GetRDS(securedPassword))
                {
                    decimal nextKey = 1;
                    if (aLaMPRDS.PUBLICATIONS.Count() > 0)
                    {
                        nextKey = aLaMPRDS.PUBLICATIONS.OrderByDescending(p=>p.PUBLICATION_ID).First().PUBLICATION_ID + 1;
                    }
                    foreach (PUBLICATION item in aPublications)
                    {
                        //update database ID
                        item.PUBLICATION_ID = nextKey;
                        aLaMPRDS.PUBLICATIONS.AddObject(item);
                        nextKey += 1;

                    }//next item

                    aLaMPRDS.SaveChanges();
                }// end using

            }// end using

            //Return object to verify persisitance
            return new OperationResult.OK { ResponseResource = aPublications };
        }
        #endregion

        #region PutMethods

        [RequiresAuthentication]
        [HttpOperation(HttpMethod.PUT, ForUriName = "UpdatePublication")]
        public OperationResult Post(Int32 PubId, PUBLICATION instance)
        {
            //Return BadRequest if missing required fields
            if ((PubId <= 0))
            {
                return new OperationResult.BadRequest();
            }


            //Get basic authentication password
            using (EasySecureString securedPassword = GetSecuredPassword())
            {
                using (LaMPDSEntities aLaMPRDS = GetRDS(securedPassword))
                {
                    //fetch the object to be updated (assuming that it exists)
                    PUBLICATION ObjectToBeUpdated = aLaMPRDS.PUBLICATIONS.Single(p => p.PUBLICATION_ID == PubId);

                    //url
                    ObjectToBeUpdated.URL = (string.IsNullOrEmpty(instance.URL) ?
                        ObjectToBeUpdated.URL : instance.URL);


                    //Citation
                    ObjectToBeUpdated.CITATION = (string.IsNullOrEmpty(instance.CITATION) ?
                        ObjectToBeUpdated.CITATION : instance.CITATION);


                    aLaMPRDS.SaveChanges();
                }// end using

            }// end using

            //Return object to verify persisitance
            return new OperationResult.OK { ResponseResource = instance };
        }

        #endregion

        #region DeleteMethods
        [RequiresAuthentication]
        [HttpOperation(HttpMethod.DELETE, ForUriName = "DeletePublication")]
        public OperationResult Post(Int32 PublicationId)
        {
            //Return BadRequest if missing required fields
            if (PublicationId <= 0)
            {
                return new OperationResult.BadRequest();
            }


            //Get basic authentication password
            using (EasySecureString securedPassword = GetSecuredPassword())
            {
                using (LaMPDSEntities aLaMPRDS = GetRDS(securedPassword))
                {
                    //fetch the object to be updated (assuming that it exists)
                    PUBLICATION ObjectToBeDeleted = aLaMPRDS.PUBLICATIONS.Single(p => p.PUBLICATION_ID == PublicationId);
                    //delete it
                    aLaMPRDS.PUBLICATIONS.DeleteObject(ObjectToBeDeleted);

                    aLaMPRDS.SaveChanges();

                }// end using
            }// end using

            //Return object to verify persisitance
            return new OperationResult.OK { };
        }

        #endregion

        #endregion

     }//end PublicationHandler
}//end namespace