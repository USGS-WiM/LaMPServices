//------------------------------------------------------------------------------
//----- SiteHandler -----------------------------------------------------------
//------------------------------------------------------------------------------

//-------1---------2---------3---------4---------5---------6---------7---------8
//       01234567890123456789012345678901234567890123456789012345678901234567890
//-------+---------+---------+---------+---------+---------+---------+---------+

// copyright:   2012 WiM - USGS

//    authors:  Jeremy K. Newson USGS Wisconsin Internet Mapping
//              
//  
//   purpose:   Handles Site resources through the HTTP uniform interface.
//              Equivalent to the controller in MVC.
//
//discussion:   Handlers are objects which handle all interaction with resources in 
//              this case the resources are POCO classes derived from the EF. 
//              https://github.com/openrasta/openrasta/wiki/Handlers
//
//     
#region Comments
// 03.07.14 - TR - Adding endpoint for mapper filter
// 08.22.13 - TR - Changed this to SiteHandler and removed Location from schema
// 04.02.13 - jkn - Created public user for get requests
// 03.22.13 - jkn - Edited DB schema to have a many2many relation with frequency,media, resources
// 04.26.12 - jkn - Created
#endregion                          


using System;
using System.Collections.Generic;
using System.Linq;
using System.Web;
using System.Runtime.InteropServices;
using LaMPServices.Authentication;
using LaMPServices.Resources;
using OpenRasta.Web;
using OpenRasta.Security;


namespace LaMPServices.Handlers
{
    public class SiteHandler:HandlerBase
    {
        #region Routed Methods

        #region GetMethods

        [HttpOperation(HttpMethod.GET)]
        public OperationResult Get(Int32 siteId)
        {
            SITE aSite;

            //return BadRequest if ther is no ID
            if (siteId <= 0)
            {return new OperationResult.BadRequest();}

            using (LaMPDSEntities aLaMPRDS = GetRDS())
                {
                    aSite = aLaMPRDS.SITE.SingleOrDefault(c => c.SITE_ID == siteId);

                    if (aSite != null)
                        aSite.LoadLinks(Context.ApplicationBaseUri.AbsoluteUri, linkType.e_individual);
                }//end using


            return new OperationResult.OK { ResponseResource = aSite };
        }//end httpMethod get

        [LaMPRequiresRole(new string[] { AdminRole, ManagerRole })]
        [HttpOperation(HttpMethod.GET)]
        public OperationResult Get()
        {
            List<SITE> aSiteList = null;

            //Get basic authentication password
            using (EasySecureString securedPassword = GetSecuredPassword())
            {
                using (LaMPDSEntities aLaMPRDS = GetRDS(securedPassword))
                {
                    if (IsAuthorized(ManagerRole))
                    {
                        aSiteList = aLaMPRDS.SITE.Where(c => c.PROJECT.DATA_MANAGER.USERNAME == username).OrderBy(c => c.SITE_ID).ToList();
                    }
                    else//AdminRole
                    {
                        aSiteList = aLaMPRDS.SITE.OrderBy(c => c.SITE_ID).ToList();
                    }


                    if (aSiteList != null)
                        aSiteList.ForEach(x => x.LoadLinks(Context.ApplicationBaseUri.AbsoluteUri, linkType.e_group));

                }//end using
            }//end using

            return new OperationResult.OK { ResponseResource = aSiteList };
        }//end httpMethod get

        [HttpOperation(HttpMethod.GET, ForUriName = "GetFilteredSites")]
        public OperationResult GetFilteredSites([Optional] string paramTypes, [Optional] string parameters, [Optional] string fromDate, [Optional] string toDate, [Optional] string resComp, [Optional] string media, [Optional] string lakes, [Optional] string states)
        {
            try
            {
                SiteList sites = new SiteList();
                List<string> _parameterGroups = new List<string>();
                List<Int32> _parameters = new List<int>();
                DateTime fDate;
                DateTime tDate;
                List<Int32> _resources = new List<int>();
                List<Int32> _media = new List<int>();
                List<Int32> _lakes = new List<int>();
                List<string> _states = new List<string>();

                char[] delimiter = { ',' };

                //is this a parameter filter or parameter type filter request
                if (parameters != string.Empty)
                {
                    List<string> paramStrings = parameters.Split(delimiter, StringSplitOptions.RemoveEmptyEntries).ToList();
                    foreach (string p in paramStrings)
                    {
                        _parameters.Add(Convert.ToInt32(p));
                    }
                }
                else if (paramTypes != string.Empty)
                {
                    _parameterGroups = paramTypes.Split(delimiter, StringSplitOptions.RemoveEmptyEntries).ToList();
                }
                
                //is there a date range specified
                if (fromDate != null)
                {
                    fDate = Convert.ToDateTime(fromDate);
                    tDate = Convert.ToDateTime(toDate);
                }
                return new OperationResult.OK { ResponseResource = sites };

            }
            catch (Exception e)
            {
                return new OperationResult.BadRequest();
            }
        }
        
        [HttpOperation(HttpMethod.GET, ForUriName = "GetProjectSites")]
        public OperationResult GetProjectSites(Int32 projectId)
        {
            List<SITE> siteList = null;

            using (LaMPDSEntities aLaMPRDS = GetRDS())
            {

                siteList = aLaMPRDS.PROJECTS.SingleOrDefault(p => p.PROJECT_ID == projectId).SITE.OrderBy(c => c.SITE_ID).ToList();

                if (siteList != null)
                    siteList.ForEach(x => x.LoadLinks(Context.ApplicationBaseUri.AbsoluteUri, linkType.e_group));

            }//end using

            return new OperationResult.OK { ResponseResource = siteList };
        }//end httpMethod get

        //[HttpOperation(HttpMethod.GET, ForUriName = "GetSiteCatalogs")]
        //public OperationResult GetSiteCatalogs(Int32 siteId)
        //{
        //    List<CATALOG_> catalogList = null;

        //    using (LaMPDSEntities aLaMPRDS = GetRDS())
        //    {

        //        catalogList = aLaMPRDS.LOCATIONS.SingleOrDefault(s=>s.LOCATION_ID == siteId).CATALOG_.OrderBy(c => c.CATALOG_ID).ToList();

        //        if (catalogList != null)
        //            catalogList.ForEach(x => x.LoadLinks(Context.ApplicationBaseUri.AbsoluteUri, linkType.e_group));


        //    }//end using


        //    return new OperationResult.OK { ResponseResource = catalogList };
        //}//end httpMethod get

        [HttpOperation(HttpMethod.GET, ForUriName = "GetFrequencySites")]
        public OperationResult GetFrequencySites(Int32 frequencyId)
        {
            List<SITE> siteList = null;

            using (LaMPDSEntities aLaMPRDS = GetRDS())
            {
                siteList = aLaMPRDS.SITE_FREQUENCY.Where(cf => cf.FREQUENCY_TYPE_ID == frequencyId)
                                                    .Select(cf => cf.SITE).OrderBy(c => c.SITE_ID).ToList();

                if (siteList != null)
                    siteList.ForEach(x => x.LoadLinks(Context.ApplicationBaseUri.AbsoluteUri, linkType.e_group));

            }//end using

            return new OperationResult.OK { ResponseResource = siteList };
        }//end httpMethod get


        [HttpOperation(HttpMethod.GET, ForUriName = "GetLakeSites")] //from SitesHandler
        public OperationResult GetLakeSites(Int32 lakeId)
        {
            List<SITE> siteList;

            //return BadRequest if ther is no ID
            if (lakeId <= 0)
            { return new OperationResult.BadRequest(); }

            using (LaMPDSEntities aLaMPRDS = GetRDS())
            {

                //siteList = aLaMPRDS.LAKE_TYPE.SingleOrDefault(lt => lt.LAKE_TYPE_ID == lakeId).LOCATIONs.ToList();
                siteList = aLaMPRDS.LAKE_TYPE.SingleOrDefault(lt => lt.LAKE_TYPE_ID == lakeId).SITE.ToList();

            }//end using
            if (siteList != null)
                siteList.ForEach(x => x.LoadLinks(Context.ApplicationBaseUri.AbsoluteUri, linkType.e_group));

            return new OperationResult.OK { ResponseResource = siteList };
        }//end httpMethod get

        [HttpOperation(HttpMethod.GET, ForUriName = "GetStatusSites")] //from siteHandler
        public OperationResult GetStatusSites(Int32 statusId)
        {
            List<SITE> siteList;

            //return BadRequest if ther is no ID
            if (statusId <= 0)
            { return new OperationResult.BadRequest(); }

            using (LaMPDSEntities aLaMPRDS = GetRDS())
            {
                //siteList = aLaMPRDS.STATUS_TYPE.SingleOrDefault(s => s.STATUS_ID == statusId).LOCATIONs.ToList();
                siteList = aLaMPRDS.STATUS_TYPE.SingleOrDefault(s => s.STATUS_ID == statusId).SITE.ToList();

            }//end using

            if (siteList != null)
                siteList.ForEach(x => x.LoadLinks(Context.ApplicationBaseUri.AbsoluteUri, linkType.e_group));

            return new OperationResult.OK { ResponseResource = siteList };
        }//end httpMethod get

        [HttpOperation(HttpMethod.GET, ForUriName = "GetResourceSites")]
        public OperationResult GetResourceSites(Int32 resourceId)
        {
            List<SITE> siteList = null;

            using (LaMPDSEntities aLaMPRDS = GetRDS())
            {
                siteList = aLaMPRDS.SITE_RESOURCE.Where(cr => cr.RESOURCE_TYPE_ID == resourceId)
                                                    .Select(cm => cm.SITE).OrderBy(c => c.SITE_ID).ToList();

                if (siteList != null)
                    siteList.ForEach(x => x.LoadLinks(Context.ApplicationBaseUri.AbsoluteUri, linkType.e_group));

            }//end using

            return new OperationResult.OK { ResponseResource = siteList };
        }//end httpMethod get

        [HttpOperation(HttpMethod.GET, ForUriName = "GetMediaSites")]
        public OperationResult GetMediaSites(Int32 mediaId)
        {
            List<SITE> siteList = null;

            using (LaMPDSEntities aLaMPRDS = GetRDS())
            {

                siteList = aLaMPRDS.SITE_MEDIA.Where(cm => cm.MEDIA_TYPE_ID == mediaId)
                                                    .Select(cm => cm.SITE).OrderBy(c => c.SITE_ID).ToList();

                if (siteList != null)
                    siteList.ForEach(x => x.LoadLinks(Context.ApplicationBaseUri.AbsoluteUri, linkType.e_group));
            }//end using

            return new OperationResult.OK { ResponseResource = siteList };
        }//end httpMethod get

        [HttpOperation(HttpMethod.GET, ForUriName = "GetParameterSites")]
        public OperationResult GetParameterSites(Int32 parameterId)
        {
            List<SITE> siteList = null;

                using (LaMPDSEntities aLaMPRDS = GetRDS())
                {

                    siteList = aLaMPRDS.SITE_PARAMETERS.Where(p => p.PARAMETER_TYPE_ID == parameterId)
                                                                            .Select(cp => cp.SITE).OrderBy(c => c.SITE_ID).ToList();

                    if (siteList != null)
                        siteList.ForEach(x => x.LoadLinks(Context.ApplicationBaseUri.AbsoluteUri, linkType.e_group));
                }//end using

                return new OperationResult.OK { ResponseResource = siteList };
        }//end httpMethod get
        #endregion

        #region PostMethods
        /// 
        /// Force the user to provide authentication 
        /// 
        [LaMPRequiresRole(new string[] { AdminRole, ManagerRole })]
        [HttpOperation(HttpMethod.POST)]
        public OperationResult Post(SITE aSite)
        {
            //Return BadRequest if missing required fields
            if (!aSite.PROJECT_ID.HasValue)
            {return new OperationResult.BadRequest();}
            if (string.IsNullOrEmpty(aSite.NAME) || (!aSite.LATITUDE.HasValue) || (!aSite.LONGITUDE.HasValue))
            { return new OperationResult.BadRequest(); }

            //Get basic authentication password
            using (EasySecureString securedPassword = GetSecuredPassword())
            {
                using (LaMPDSEntities aLaMPRDS = GetRDS(securedPassword))
                {
                    if (!IsAuthorizedToEdit(aLaMPRDS.PROJECTS.First(p => p.PROJECT_ID == aSite.PROJECT_ID).DATA_MANAGER.USERNAME))
                        return new OperationResult.Forbidden { Description = "Not Authorized" };

                    //Check for existing project
                    //if (!Exists(aLaMPRDS.CATALOG_S,ref aCatalog))
                    //{
                        //set ID
                        //aCatalog.CATALOG_ID = GetNextCatalogID(aLaMPRDS.CATALOG_S);

                    aSite.COUNTRY = GetCountry(GetCountryByName(aSite.COUNTRY));
                    aSite.STATE_PROVINCE = (GetCountryByName(aSite.COUNTRY) == Country.USA) ?
                        GetState(GetStateByName(aSite.STATE_PROVINCE)) : GetProvince(GetProvinceByName(aSite.STATE_PROVINCE));

                    aLaMPRDS.SITE.AddObject(aSite);
                    aLaMPRDS.SaveChanges();
                    //}

                    if (aSite != null)
                        aSite.LoadLinks(Context.ApplicationBaseUri.AbsoluteUri, linkType.e_individual);
                }// end using
            } //end using

           
            //Return object to verify persisitance
            return new OperationResult.OK { ResponseResource = aSite };
        }
        #endregion

        #region PutMethods
        [LaMPRequiresRole(new string[] { AdminRole, ManagerRole })]
        [HttpOperation(HttpMethod.PUT)]
        public OperationResult PUT(Int32 siteId, SITE instance)
        {
            //Return BadRequest if missing required fields
            if ((siteId <= 0))
            {
                return new OperationResult.BadRequest();
            }


            //Get basic authentication password
            using (EasySecureString securedPassword = GetSecuredPassword())
            {
                using (LaMPDSEntities aLaMPRDS = GetRDS(securedPassword))
                {
                    //fetch the object to be updated (assuming that it exists)
                    SITE ObjectToBeUpdated = aLaMPRDS.SITE.SingleOrDefault(c => c.SITE_ID == siteId);

                    if (!IsAuthorizedToEdit(ObjectToBeUpdated.PROJECT.DATA_MANAGER.USERNAME))
                        return new OperationResult.Forbidden { Description = "Not Authorized" };

                     //Start date
                    ObjectToBeUpdated.START_DATE = (DateTime.Equals(instance.START_DATE, ObjectToBeUpdated.START_DATE) ?
                         ObjectToBeUpdated.START_DATE : instance.START_DATE);

                    //End date
                    ObjectToBeUpdated.END_DATE = (DateTime.Equals(instance.END_DATE, ObjectToBeUpdated.END_DATE) ?
                         ObjectToBeUpdated.END_DATE : instance.END_DATE);
               
                    //PROJECT_ID
                    ObjectToBeUpdated.PROJECT_ID = (Decimal.Equals(instance.PROJECT_ID, ObjectToBeUpdated.PROJECT_ID) ?
                         ObjectToBeUpdated.PROJECT_ID : instance.PROJECT_ID);

                    //SAMPLE_PLATFORM
                    ObjectToBeUpdated.SAMPLE_PLATFORM = (string.IsNullOrEmpty(instance.SAMPLE_PLATFORM) ?
                        ObjectToBeUpdated.SAMPLE_PLATFORM : instance.SAMPLE_PLATFORM);

                    //Comments
                    ObjectToBeUpdated.ADDITIONAL_INFO = (string.IsNullOrEmpty(instance.ADDITIONAL_INFO) ?
                        ObjectToBeUpdated.ADDITIONAL_INFO : instance.ADDITIONAL_INFO);

                    //Name
                    ObjectToBeUpdated.NAME = (string.IsNullOrEmpty(instance.NAME) ?
                         ObjectToBeUpdated.NAME : instance.NAME);

                    //Description
                    ObjectToBeUpdated.DESCRIPTION = (string.IsNullOrEmpty(instance.DESCRIPTION) ?
                         ObjectToBeUpdated.DESCRIPTION : instance.DESCRIPTION);

                    //Latitude
                    ObjectToBeUpdated.LATITUDE = (Decimal.Equals(instance.LATITUDE, ObjectToBeUpdated.LATITUDE) ?
                         ObjectToBeUpdated.LATITUDE : instance.LATITUDE);

                    //Longitude
                    ObjectToBeUpdated.LONGITUDE = (Decimal.Equals(instance.LONGITUDE, ObjectToBeUpdated.LONGITUDE) ?
                         ObjectToBeUpdated.LONGITUDE : instance.LONGITUDE);

                    //Waterbody
                    ObjectToBeUpdated.WATERBODY = (string.IsNullOrEmpty(instance.WATERBODY) ?
                        ObjectToBeUpdated.WATERBODY : instance.WATERBODY);

                    //Status Type
                    ObjectToBeUpdated.STATUS_TYPE_ID = (Decimal.Equals(instance.STATUS_TYPE_ID, ObjectToBeUpdated.STATUS_TYPE_ID) ?
                         ObjectToBeUpdated.STATUS_TYPE_ID : instance.STATUS_TYPE_ID);

                    //Lake Type
                    ObjectToBeUpdated.LAKE_TYPE_ID = (Decimal.Equals(instance.LAKE_TYPE_ID, ObjectToBeUpdated.LAKE_TYPE_ID) ?
                         ObjectToBeUpdated.LAKE_TYPE_ID : instance.LAKE_TYPE_ID);

                    //Country
                    ObjectToBeUpdated.COUNTRY = (string.IsNullOrEmpty(instance.COUNTRY) ?
                        ObjectToBeUpdated.COUNTRY : instance.COUNTRY);

                    //State_Province
                    ObjectToBeUpdated.STATE_PROVINCE = (string.IsNullOrEmpty(instance.STATE_PROVINCE) ?
                        ObjectToBeUpdated.STATE_PROVINCE : instance.STATE_PROVINCE);

                    //Watershed_Huc8
                    ObjectToBeUpdated.WATERSHED_HUC8 = (string.IsNullOrEmpty(instance.WATERSHED_HUC8) ?
                        ObjectToBeUpdated.WATERSHED_HUC8 : instance.WATERSHED_HUC8);

                    //Url
                    ObjectToBeUpdated.URL = (string.IsNullOrEmpty(instance.URL) ?
                        ObjectToBeUpdated.URL : instance.URL);
                    
                    aLaMPRDS.SaveChanges();
          
                }// end using
            }// end using

          if (instance != null)
              instance.LoadLinks(Context.ApplicationBaseUri.AbsoluteUri, linkType.e_individual);

            //Return object to verify persisitance
            return new OperationResult.OK { ResponseResource = instance };
        }

        #endregion

        #region DeleteMethods
        [LaMPRequiresRole(new string[] { AdminRole, ManagerRole })]
        [HttpOperation(HttpMethod.DELETE)]
        public OperationResult Delete(Int32 siteId)
        {
            //Return BadRequest if missing required fields
            if (siteId <= 0)
            {return new OperationResult.BadRequest();}


            //Get basic authentication password
            using (EasySecureString securedPassword = GetSecuredPassword())
            {
                using (LaMPDSEntities aLaMPRDS = GetRDS(securedPassword))
                {
                    //fetch the object to be updated (assuming that it exists)
                    SITE ObjectToBeDeleted = aLaMPRDS.SITE.SingleOrDefault(c => c.SITE_ID == siteId);

                    if (!IsAuthorizedToEdit(ObjectToBeDeleted.PROJECT.DATA_MANAGER.USERNAME))
                        return new OperationResult.Forbidden { Description = "Not Authorized" };


                    //delete it
                    aLaMPRDS.SITE.DeleteObject(ObjectToBeDeleted);

                    aLaMPRDS.SaveChanges();

                }// end using
            
            }// end using

            //Return object to verify persisitance
            return new OperationResult.OK { };
        }

        #endregion


        #endregion
        #region "Helper Methods"
        private Boolean Exists(System.Data.Objects.IObjectSet<SITE> sites, ref SITE aSite)
        {
            SITE existingSite;
            SITE thisSite = aSite;
            //check if it exists
            try
            {
                existingSite = sites.FirstOrDefault(c => c.PROJECT_ID == thisSite.PROJECT_ID &&
                                                                                     (c.START_DATE.Value == thisSite.START_DATE.Value || !thisSite.START_DATE.HasValue) &&
                                                                                     (c.END_DATE.Value == thisSite.END_DATE.Value || !thisSite.END_DATE.HasValue) &&
                                                                                     (c.PROJECT_ID.Value == thisSite.PROJECT_ID.Value || !thisSite.PROJECT_ID.HasValue) &&
                                                                                     (string.IsNullOrEmpty(thisSite.SAMPLE_PLATFORM) || String.Equals(c.SAMPLE_PLATFORM.ToUpper(), thisSite.SAMPLE_PLATFORM.ToUpper())) &&
                                                                                     (string.IsNullOrEmpty(thisSite.ADDITIONAL_INFO) || String.Equals(c.ADDITIONAL_INFO.ToUpper(), thisSite.ADDITIONAL_INFO.ToUpper())));


                if (existingSite == null)
                    return false;

                //if exists then update ref contact
                aSite = existingSite;
                return true;

            }
            catch (Exception)
            {
                return false;
            }
        }

        //private decimal GetNextCatalogID(System.Data.Objects.IObjectSet<CATALOG_> catalogs)
        //{
        //    decimal nextKey = 1;
        //    if (catalogs.Count() > 0)
        //    {
        //        nextKey = catalogs.OrderByDescending(c => c.CATALOG_ID).First().CATALOG_ID + 1;
        //    }

        //    return nextKey;
        //}
        #endregion
    }//end SiteHandler
}//end namespace