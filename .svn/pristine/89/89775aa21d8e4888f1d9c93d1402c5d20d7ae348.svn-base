//------------------------------------------------------------------------------
//----- ResourceTypeHandler -----------------------------------------------------------
//------------------------------------------------------------------------------

//-------1---------2---------3---------4---------5---------6---------7---------8
//       01234567890123456789012345678901234567890123456789012345678901234567890
//-------+---------+---------+---------+---------+---------+---------+---------+

// copyright:   2012 WiM - USGS

//    authors:  Jeremy K. Newson USGS Wisconsin Internet Mapping
//              
//  
//   purpose:   Handles resource type resources through the HTTP uniform interface.
//              Equivalent to the controller in MVC.
//
//discussion:   Handlers are objects which handle all interaction with resources in 
//              this case the resources are POCO classes derived from the EF. 
//               https://github.com/openrasta/openrasta/wiki/Handlers
//
//     
#region Comments
// 05.02.12 - jkn - Created
#endregion   

using System;
using System.Collections.Generic;
using System.Linq;
using System.Web;

using LaMPServices.Authentication;
using OpenRasta.Web;
using OpenRasta.Security;

namespace LaMPServices.Handlers
{
    public class ResourceHandler:HandlerBase
    {
        #region Routed Methods

        #region GetMethods
        [RequiresAuthentication]
        [HttpOperation(HttpMethod.GET)]
        public OperationResult Get()
        {
            List<RESOURCE_TYPE> resourceList;

            //Get basic authentication password
            using (EasySecureString securedPassword = GetSecuredPassword())
            {
                using (LaMPDSEntities aLaMPRDS = GetRDS(securedPassword))
                {

                    resourceList = aLaMPRDS.RESOURCE_TYPE.OrderBy(r => r.RESOURCE_TYPE_ID).ToList();

                    if (resourceList != null)
                        resourceList.ForEach(x => x.LoadLinks(Context.ApplicationBaseUri.AbsoluteUri, linkType.e_group));
                    
                }//end using
            }//end using

            return new OperationResult.OK { ResponseResource = resourceList };
        }//end httpMethod get

        [RequiresAuthentication]
        [HttpOperation(HttpMethod.GET)]
        public OperationResult Get(Int32 resourceTypeId)
        {
            RESOURCE_TYPE aResource;

            //return BadRequest if ther is no ID
            if (resourceTypeId <= 0)
            {
                return new OperationResult.BadRequest();
            }

            //Get basic authentication password
            using (EasySecureString securedPassword = GetSecuredPassword())
            {
                using (LaMPDSEntities aLaMPRDS = GetRDS(securedPassword))
                {
                    aResource = aLaMPRDS.RESOURCE_TYPE.SingleOrDefault(r => r.RESOURCE_TYPE_ID == resourceTypeId);

                    if (aResource != null)
                        aResource.LoadLinks(Context.ApplicationBaseUri.AbsoluteUri, linkType.e_individual);

                }//end using
            }//end using

            return new OperationResult.OK { ResponseResource = aResource };
        }//end httpMethod get

        [RequiresAuthentication]
        [HttpOperation(HttpMethod.GET, ForUriName = "GetCatalogResourceTypes")]
        public OperationResult GetCatalogResourceTypes(Int32 catalogId)
        {
            List<RESOURCE_TYPE> resourceList;

            //return BadRequest if ther is no ID
            if (catalogId <= 0)
            {
                return new OperationResult.BadRequest();
            }

            //Get basic authentication password
            using (EasySecureString securedPassword = GetSecuredPassword())
            {
                using (LaMPDSEntities aLaMPRDS = GetRDS(securedPassword))
                {
                    resourceList = aLaMPRDS.CATALOG_RESOURCE.Where(cr => cr.CATALOG_ID == catalogId)
                                                                .Select(cr=>cr.RESOURCE_TYPE)
                                                                        .OrderBy(r=>r.RESOURCE_TYPE_ID).ToList();


                    if (resourceList != null)
                        resourceList.ForEach(x => x.LoadLinks(Context.ApplicationBaseUri.AbsoluteUri, linkType.e_group));

                }//end using
            }//end using

            return new OperationResult.OK { ResponseResource = resourceList };
        }//end httpMethod get

        #endregion

        #region PostMethods
        /// 
        /// Force the user to provide authentication 
        /// 
        [LaMPRequiresRole(new string[] { AdminRole, ManagerRole })]
        [HttpOperation(HttpMethod.POST)]
        public OperationResult Post(RESOURCE_TYPE aResource)
        {
            //Return BadRequest if missing required fields
            if (String.IsNullOrEmpty(aResource.RESOURCE_NAME))
            {
                return new OperationResult.BadRequest();
            }

            //Get basic authentication password
            using (EasySecureString securedPassword = GetSecuredPassword())
            {
                using (LaMPDSEntities aLaMPRDS = GetRDS(securedPassword))
                {
                    if (!Exists(aLaMPRDS.RESOURCE_TYPE, ref aResource))
                    {
                        //set ID
                        //aResource.RESOURCE_TYPE_ID = GetNextResourceID(aLaMPRDS.RESOURCE_TYPE);

                        aLaMPRDS.RESOURCE_TYPE.AddObject(aResource);
                        aLaMPRDS.SaveChanges();
                    }

                    if (aResource != null)
                        aResource.LoadLinks(Context.ApplicationBaseUri.AbsoluteUri, linkType.e_individual);

                }// end using
            }// end using

            //Return object to verify persisitance
            return new OperationResult.OK { ResponseResource = aResource };
        }

        [LaMPRequiresRole(new string[] { AdminRole, ManagerRole })]
        [HttpOperation(HttpMethod.POST, ForUriName = "AddCatalogResourceType")]
        public OperationResult AddCatalogResourceType(Int32 catalogId, RESOURCE_TYPE aResourceType)
        {
            CATALOG_RESOURCE aCatalogResource = null;
            List<RESOURCE_TYPE> resourceList = null;
            //Return BadRequest if missing required fields
            if (catalogId <= 0 || String.IsNullOrEmpty(aResourceType.RESOURCE_NAME))
            { return new OperationResult.BadRequest(); }

            //Get basic authentication password
            using (EasySecureString securedPassword = GetSecuredPassword())
            {
                using (LaMPDSEntities aLaMPRDS = GetRDS(securedPassword))
                {

                    //check if valid project
                    if (aLaMPRDS.CATALOG_S.First(c => c.CATALOG_ID == catalogId) == null)
                        return new OperationResult.BadRequest { Description = "Catalog does not exist" };

                    //check authorization
                    if (!IsAuthorizedToEdit(aLaMPRDS.CATALOG_S.FirstOrDefault(c => c.CATALOG_ID == catalogId).PROJECT.DATA_MANAGER.USERNAME))
                        return new OperationResult.Forbidden { Description = "Not Authorized" };

                    if (!Exists(aLaMPRDS.RESOURCE_TYPE, ref aResourceType))
                    {
                        //set obj
                        aLaMPRDS.RESOURCE_TYPE.AddObject(aResourceType);
                        aLaMPRDS.SaveChanges();
                    }//end if

                    //add to catalolg
                    //first check if Catalog already contains parameter
                    if (aLaMPRDS.CATALOG_RESOURCE.FirstOrDefault(cr => cr.RESOURCE_TYPE_ID == aResourceType.RESOURCE_TYPE_ID &&
                                                                         cr.CATALOG_ID == catalogId) == null)
                    {//create one
                        aCatalogResource = new CATALOG_RESOURCE();
                        //set ID and create catalogMedia
                        aCatalogResource.CATALOG_ID = catalogId;
                        aCatalogResource.RESOURCE_TYPE_ID = aResourceType.RESOURCE_TYPE_ID;

                        aLaMPRDS.CATALOG_RESOURCE.AddObject(aCatalogResource);
                        aLaMPRDS.SaveChanges();
                    }//end if

                    //return the list of contacts associated with project
                    resourceList = aLaMPRDS.RESOURCE_TYPE.Where(r => r.CATALOG_RESOURCE.Any(cr => cr.CATALOG_ID == catalogId)).ToList();

                    if (resourceList != null)
                        resourceList.ForEach(x => x.LoadLinks(Context.ApplicationBaseUri.AbsoluteUri, linkType.e_group));

                }// end using
            }// end using

            //Return object to verify persisitance
            return new OperationResult.OK { ResponseResource = resourceList };
        }

        [LaMPRequiresRole(new string[] { AdminRole, ManagerRole })]
        [HttpOperation(HttpMethod.POST)]
        public OperationResult Post(List<RESOURCE_TYPE> resourceList)
        {
            //Return BadRequest if missing required fields
            if (resourceList.Count <= 0)
            {
                return new OperationResult.BadRequest();
            }

            //Get basic authentication password
            using (EasySecureString securedPassword = GetSecuredPassword())
            {
                using (LaMPDSEntities aLaMPRDS = GetRDS(securedPassword))
                {
                    for (int i = 0; i < resourceList.Count; i++)
                    {
                        RESOURCE_TYPE item = resourceList[i];
                        if (!Exists(aLaMPRDS.RESOURCE_TYPE, ref item))
                        {
                            //item.RESOURCE_TYPE_ID = GetNextResourceID(aLaMPRDS.RESOURCE_TYPE);
                            aLaMPRDS.RESOURCE_TYPE.AddObject(item);
                            aLaMPRDS.SaveChanges();
                            //update
                        }
                        //update publications to pass back
                        resourceList[i] = item;

                    }//next item

                    if (resourceList != null)
                        resourceList.ForEach(x => x.LoadLinks(Context.ApplicationBaseUri.AbsoluteUri, linkType.e_group));
                }// end using
            }// end using

            //Return object to verify persisitance
            return new OperationResult.OK { ResponseResource = resourceList };
        }
        #endregion

        #region PutMethods

        [LaMPRequiresRole(new string[] { AdminRole, ManagerRole })]
        [HttpOperation(HttpMethod.PUT)]
        public OperationResult Put(Int32 resourceTypeId, RESOURCE_TYPE instance)
        {
            //Return BadRequest if missing required fields
            if ((resourceTypeId <= 0))
            {return new OperationResult.BadRequest();}


            //Get basic authentication password
            using (EasySecureString securedPassword = GetSecuredPassword())
            {
                using (LaMPDSEntities aLaMPRDS = GetRDS(securedPassword))
                {
                    //fetch the object to be updated (assuming that it exists)
                    RESOURCE_TYPE ObjectToBeUpdated = aLaMPRDS.RESOURCE_TYPE.SingleOrDefault(r => r.RESOURCE_TYPE_ID == resourceTypeId);

                    //RESOURCE
                    ObjectToBeUpdated.RESOURCE_NAME = (string.IsNullOrEmpty(instance.RESOURCE_NAME) ?
                        ObjectToBeUpdated.RESOURCE_NAME : instance.RESOURCE_NAME);

                    aLaMPRDS.SaveChanges();

                    if (instance != null)
                        instance.LoadLinks(Context.ApplicationBaseUri.AbsoluteUri, linkType.e_individual);
                
                }// end using
            }// end using

            //Return object to verify persisitance
            return new OperationResult.OK { ResponseResource = instance };
        }

        #endregion

        #region DeleteMethods

        [RequiresRole(AdminRole)]
        [HttpOperation(HttpMethod.DELETE)]
        public OperationResult Delete(Int32 resourceTypeId)
        {
            //Return BadRequest if missing required fields
            if (resourceTypeId <= 0)
            {return new OperationResult.BadRequest();}


            //Get basic authentication password
            using (EasySecureString securedPassword = GetSecuredPassword())
            {
                using (LaMPDSEntities aLaMPRDS = GetRDS(securedPassword))
                {
                    //fetch the object to be updated (assuming that it exists)
                    RESOURCE_TYPE ObjectToBeDeleted = aLaMPRDS.RESOURCE_TYPE.SingleOrDefault(r => r.RESOURCE_TYPE_ID == resourceTypeId);
              
                    //delete it
                    aLaMPRDS.RESOURCE_TYPE.DeleteObject(ObjectToBeDeleted);

                    aLaMPRDS.SaveChanges();

                }// end using

            }// end using

            //Return object to verify persisitance
            return new OperationResult.OK { };
        }

        #endregion

        #endregion
        #region "Helper Methods"
        private Boolean Exists(System.Data.Objects.IObjectSet<RESOURCE_TYPE> resources, ref RESOURCE_TYPE aResource)
        {
            RESOURCE_TYPE existingResource;
            RESOURCE_TYPE thisResource = aResource;
            //check if it exists
            try
            {
                existingResource = resources.FirstOrDefault(r => string.Equals(r.RESOURCE_NAME.ToUpper(),thisResource.RESOURCE_NAME.ToUpper()));

                if (existingResource == null)
                    return false;

                //if exists then update ref contact
                aResource = existingResource;
                return true;

            }
            catch (Exception)
            {
                return false;
            }
        }

        //private decimal GetNextResourceID(System.Data.Objects.IObjectSet<RESOURCE_TYPE> resources)
        //{
        //    decimal nextKey = 1;
        //    if (resources.Count() > 0)
        //    {
        //        nextKey = resources.OrderByDescending(r=>r.RESOURCE_TYPE_ID).First().RESOURCE_TYPE_ID + 1;
        //    }

        //    return nextKey;
        //}
        #endregion
    }//end ResourceTypeHandler
}//end namespace