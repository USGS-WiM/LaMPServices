//------------------------------------------------------------------------------
//----- ParameterTypeHandler -----------------------------------------------------------
//------------------------------------------------------------------------------

//-------1---------2---------3---------4---------5---------6---------7---------8
//       01234567890123456789012345678901234567890123456789012345678901234567890
//-------+---------+---------+---------+---------+---------+---------+---------+

// copyright:   2012 WiM - USGS

//    authors:  Jeremy K. Newson USGS Wisconsin Internet Mapping
//              
//  
//   purpose:   Handles parameter type resources through the HTTP uniform interface.
//              Equivalent to the controller in MVC.
//
//discussion:   Handlers are objects which handle all interaction with resources in 
//              this case the resources are POCO classes derived from the EF. 
//               https://github.com/openrasta/openrasta/wiki/Handlers
//
//     
#region Comments
// 05.02.12 - jkn - Created
#endregion   

using System;
using System.Collections.Generic;
using System.Linq;
using System.Web;

using LaMPServices.Authentication;
using OpenRasta.Web;
using OpenRasta.Security;

namespace LaMPServices.Handlers
{
    public class ParameterTypeHandler:HandlerBase
    {
        #region Routed Methods

        #region GetMethods
        [HttpOperation(HttpMethod.GET)]
        public OperationResult Get()
        {
            List<PARAMETER_TYPE> parameters;

            //Get basic authentication password
            using (EasySecureString securedPassword = GetSecuredPassword())
            {
                using (LaMPDSEntities aLaMPRDS = GetRDS(securedPassword))
                {

                    parameters = aLaMPRDS.PARAMETER_TYPE.OrderBy(p => p.PARAMETER_TYPE_ID).ToList();

                }//end using
            }//end using

            return new OperationResult.OK { ResponseResource = parameters };
        }//end httpMethod get


        [HttpOperation(HttpMethod.GET)]
        public OperationResult Get(Int32 parameterTypeId)
        {
            PARAMETER_TYPE aParameterType;

            //return BadRequest if ther is no ID
            if (parameterTypeId <= 0)
            {
                return new OperationResult.BadRequest();
            }

            //Get basic authentication password
            using (EasySecureString securedPassword = GetSecuredPassword())
            {
                using (LaMPDSEntities aLaMPRDS = GetRDS(securedPassword))
                {

                    aParameterType = aLaMPRDS.PARAMETER_TYPE.Single(p => p.PARAMETER_TYPE_ID == parameterTypeId);

                }//end using
            }//end using

            return new OperationResult.OK { ResponseResource = aParameterType };
        }//end httpMethod get

        #endregion

        #region PostMethods
        /// 
        /// Force the user to provide authentication 
        /// 
        [RequiresRole(AdminRole)]
        [HttpOperation(HttpMethod.POST)]
        public OperationResult Post(PARAMETER_TYPE aParameterType)
        {
            //Return BadRequest if missing required fields
            if (String.IsNullOrEmpty(aParameterType.PARAMETER))
            {return new OperationResult.BadRequest();}

            //Get basic authentication password
            using (EasySecureString securedPassword = GetSecuredPassword())
            {
                using (LaMPDSEntities aLaMPRDS = GetRDS(securedPassword))
                {
                    if(!Exists(aLaMPRDS.PARAMETER_TYPE,ref aParameterType))
                    {
                        //set ID
                        aParameterType.PARAMETER_TYPE_ID = GetNextParameterID(aLaMPRDS.PARAMETER_TYPE);

                        aLaMPRDS.PARAMETER_TYPE.AddObject(aParameterType);
                        aLaMPRDS.SaveChanges();
                    }
                }// end using

            }// end using

            //Return object to verify persisitance
            return new OperationResult.OK { ResponseResource = aParameterType };
        }

        #endregion

        #region PutMethods

        [RequiresRole(AdminRole)]
        [HttpOperation(HttpMethod.PUT)]
        public OperationResult Put(Int32 parameterTypeId, PARAMETER_TYPE instance)
        {
            //Return BadRequest if missing required fields
            if ((parameterTypeId <= 0))
            {return new OperationResult.BadRequest();}


            //Get basic authentication password
            using (EasySecureString securedPassword = GetSecuredPassword())
            {
                using (LaMPDSEntities aLaMPRDS = GetRDS(securedPassword))
                {
                    //fetch the object to be updated (assuming that it exists)
                    PARAMETER_TYPE ObjectToBeUpdated = aLaMPRDS.PARAMETER_TYPE.Single(p => p.PARAMETER_TYPE_ID == parameterTypeId);

                    //Parameter
                    ObjectToBeUpdated.PARAMETER = (string.IsNullOrEmpty(instance.PARAMETER) ?
                        ObjectToBeUpdated.PARAMETER : instance.PARAMETER);


                    //Citation
                    ObjectToBeUpdated.PARAMETER_GROUP = (string.IsNullOrEmpty(instance.PARAMETER_GROUP) ?
                        ObjectToBeUpdated.PARAMETER_GROUP : instance.PARAMETER_GROUP);


                    aLaMPRDS.SaveChanges();
                }// end using

            }// end using

            //Return object to verify persisitance
            return new OperationResult.OK { ResponseResource = instance };
        }
        
        #endregion

        #region DeleteMethods

        [RequiresRole(AdminRole)]
        [HttpOperation(HttpMethod.DELETE)]
        public OperationResult Post(Int32 parameterTypeId)
        {
            //Return BadRequest if missing required fields
            if (parameterTypeId <= 0)
            {return new OperationResult.BadRequest();}


            //Get basic authentication password
            using (EasySecureString securedPassword = GetSecuredPassword())
            {
                using (LaMPDSEntities aLaMPRDS = GetRDS(securedPassword))
                {
                    //fetch the object to be updated (assuming that it exists)
                    PARAMETER_TYPE ObjectToBeDeleted = aLaMPRDS.PARAMETER_TYPE.Single(p => p.PARAMETER_TYPE_ID == parameterTypeId);
                    //delete it
                    aLaMPRDS.PARAMETER_TYPE.DeleteObject(ObjectToBeDeleted);

                    aLaMPRDS.SaveChanges();

                }// end using

            }// end using

            //Return object to verify persisitance
            return new OperationResult.OK { };
        }

        #endregion

        #endregion
        #region "Helper Methods"
        private Boolean Exists(System.Data.Objects.IObjectSet<PARAMETER_TYPE> parameters, ref PARAMETER_TYPE aParameterType)
        {
            PARAMETER_TYPE existingParameter;
            PARAMETER_TYPE thisParameter = aParameterType;
            //check if it exists
            try
            {
                existingParameter = parameters.FirstOrDefault(p => p.PARAMETER.Equals(thisParameter.PARAMETER));

                if (existingParameter == null)
                    return false;

                //if exists then update ref contact
                aParameterType = existingParameter;
                return true;

            }
            catch (Exception)
            {
                return false;
            }
        }

        private decimal GetNextParameterID(System.Data.Objects.IObjectSet<PARAMETER_TYPE> parameters)
        {
            decimal nextKey = 1;
            if (parameters.Count() > 0)
            {
                nextKey = parameters.OrderByDescending(p => p.PARAMETER_TYPE_ID).First().PARAMETER_TYPE_ID + 1;
            }

            return nextKey;
        }
        #endregion
    }//end ParameterTypeHandler
}//end namespace